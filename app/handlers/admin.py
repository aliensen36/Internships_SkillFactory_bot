from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from sqlalchemy import select, func
from datetime import datetime, timedelta
from collections import defaultdict
from app.fsm_states import BroadcastStates
from app.keyboards.reply import kb_admin_main
from database.models import User, Specialization, Course, Broadcast

admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


@admin_router.message(Command("admin"))
async def confirmation(message: Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb_admin_main)


@admin_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    await state.set_state(BroadcastStates.waiting_for_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")


@admin_router.message(BroadcastStates.waiting_for_text)
async def process_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.set_state(BroadcastStates.waiting_for_image)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")


@admin_router.message(BroadcastStates.waiting_for_image, F.text == "/skip")
async def skip_image(message: Message, state: FSMContext, session: AsyncSession):
    await process_course_selection(message, state, session)


@admin_router.message(BroadcastStates.waiting_for_image, F.photo)
async def process_image(message: Message, state: FSMContext, session: AsyncSession):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(image_path=file_id)
    await process_course_selection(message, state, session)


async def process_course_selection(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
    result = await session.execute(select(Course))
    courses = result.scalars().all()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    builder = ReplyKeyboardBuilder()
    for course in courses:
        builder.button(text=f"üéØ {course.name}")
    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")
    builder.adjust(2)

    await state.set_state(BroadcastStates.waiting_for_courses)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.update_data(selected_courses=[])


@admin_router.message(BroadcastStates.waiting_for_courses, F.text.startswith("üéØ"))
async def select_course(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    selected_courses = data.get("selected_courses", [])

    course_name = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
    result = await session.execute(select(Course).where(Course.name == course_name))
    course = result.scalar_one_or_none()

    if course and course.id not in selected_courses:
        selected_courses.append(course.id)
        await state.update_data(selected_courses=selected_courses)
        await message.answer(f"–ö—É—Ä—Å {course_name} –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'")


@admin_router.message(BroadcastStates.waiting_for_courses, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")
async def finish_course_selection(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("selected_courses"):
        await message.answer("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫—É—Ä—Å!")
        return

    await state.set_state(BroadcastStates.confirmation)
    from aiogram.utils.keyboard import ReplyKeyboardBuilder
    builder = ReplyKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")

    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n\n"
        f"–¢–µ–∫—Å—Ç: {data['text']}\n"
        f"–ö—É—Ä—Å—ã: {len(data['selected_courses'])}\n"
        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if 'image_path' in data else '–ù–µ—Ç'}",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@admin_router.message(BroadcastStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def confirm_broadcast(message: Message, state: FSMContext,
                            session: AsyncSession, bot: Bot):
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    async with session.begin():
        broadcast = Broadcast(
            text=data['text'],
            image_path=data.get('image_path'),
            is_sent=False
        )
        broadcast.set_course_ids(data['selected_courses'])
        session.add(broadcast)
        await session.flush()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        sent_count = 0
        recipients = await broadcast.get_recipients(session)

        for user in recipients:
            try:
                if 'image_path' in data:
                    await bot.send_photo(
                        chat_id=user.tg_id,
                        photo=data['image_path'],
                        caption=data['text']
                    )
                else:
                    await bot.send_message(
                        chat_id=user.tg_id,
                        text=data['text']
                    )
                sent_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_id}: {e}")

        broadcast.is_sent = True
        broadcast.sent_at = func.now()
        await session.commit()

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


@admin_router.message(BroadcastStates.confirmation, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_broadcast(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


@admin_router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_statistics(message: Message, session: AsyncSession):
    total_users = await session.scalar(select(func.count()).select_from(User))
    total_specializations = await session.scalar(select(func.count()).select_from(Specialization))
    total_courses = await session.scalar(select(func.count()).select_from(Course))

    text = (
    "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç-–±–æ—Ç–∞:</b>\n\n"
    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n\n"
    f"üéØ –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: <b>{total_specializations}</b>\n\n"
    f"üìö –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: <b>{total_courses}</b>\n\n"
    # f"üó£ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{total_feedbacks}</b>\n"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=kb_admin_main)

