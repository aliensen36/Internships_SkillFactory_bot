from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from sqlalchemy import select, func
from datetime import datetime, timedelta
from collections import defaultdict
from app.fsm_states import BroadcastState
from database.models import User


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
admin_main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üì¢ –†–∞—Å—Å—ã–ª–∫–∞'), KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')],
],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ')


@admin_router.message(Command("admin"))
async def confirmation(message: Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=admin_main)


@admin_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    await message.answer("üì® –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(BroadcastState.waiting_for_text)


@admin_router.message(BroadcastState.waiting_for_text)
async def get_broadcast_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ).")
    await state.set_state(BroadcastState.waiting_for_photo)


@admin_router.message(BroadcastState.waiting_for_photo)
async def get_broadcast_photo(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    text = data.get("text")

    photo = None
    if message.photo:
        photo = message.photo[-1].file_id
    elif message.text.lower() == "–Ω–µ—Ç":
        photo = None
    else:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ)
    result = await session.execute(select(User.tg_id))
    user_ids = [row[0] for row in result.fetchall()]

    success, fail = 0, 0

    for user_id in user_ids:
        try:
            if photo:
                await message.bot.send_photo(chat_id=user_id, photo=photo, caption=text)
            else:
                await message.bot.send_message(chat_id=user_id, text=text)
            success += 1
        except Exception:
            fail += 1

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–∫–∏: {fail}",
                         reply_markup=admin_main)
    await state.clear()
