import os
from aiofiles import open as aio_open
from aiogram.types import FSInputFile
from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from sqlalchemy import select, func
from datetime import datetime, timedelta
from collections import defaultdict
from app.fsm_states import BroadcastState
from app.keyboards.reply import kb_admin_main
from database.models import User, Specialization, Course, Broadcast


admin_broadcast_router = Router()
admin_broadcast_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

MEDIA_DIR = 'media/images'


@admin_broadcast_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    await message.answer("üì® –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastState.waiting_for_text)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
@admin_broadcast_router.message(BroadcastState.waiting_for_text)
async def get_broadcast_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∏–∫–ª–∏–Ω–µ /skip, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç:")
    await state.set_state(BroadcastState.waiting_for_photo)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@admin_broadcast_router.message(BroadcastState.waiting_for_photo)
async def get_broadcast_photo(message: Message, state: FSMContext,
                              session: AsyncSession):
    data = await state.get_data()

    photo = None
    if message.photo:
        photo = message.photo[-1].file_id
    elif message.text == "/skip":
        photo = None
    else:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–ª–∏–∫–ª–∏–Ω–µ /skip'.")
        return

    await state.update_data(photo=photo)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤
    result = await session.execute(select(Course))
    courses = result.scalars().all()

    builder = ReplyKeyboardBuilder()
    for course in courses:
        builder.button(text=f"üéØ {course.name}")
    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")
    builder.adjust(2)

    await state.set_state(BroadcastState.waiting_for_courses)
    await state.update_data(selected_courses=[])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                         reply_markup=builder.as_markup(resize_keyboard=True))


@admin_broadcast_router.message(BroadcastState.waiting_for_courses,
                                F.text.startswith("üéØ"))
async def select_course(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    selected_courses = data.get("selected_courses", [])
    course_name = message.text[2:]

    result = await session.execute(select(Course).where(Course.name == course_name))
    course = result.scalar_one_or_none()
    if course and course.id not in selected_courses:
        selected_courses.append(course.id)
        await state.update_data(selected_courses=selected_courses)
        await message.answer(f"–ö—É—Ä—Å {course.name} –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'")


@admin_broadcast_router.message(BroadcastState.waiting_for_courses,
                                F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä")
async def confirm_broadcast(message: Message, state: FSMContext, session: AsyncSession, bot: Bot):
    data = await state.get_data()
    text = data.get("text")
    photo = data.get("photo")
    course_ids = data.get("selected_courses")

    if not course_ids:
        await message.answer("‚ö† –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞!")
        return

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö course_id –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    result = await session.execute(
        select(User.tg_id).where(User.course_id.in_(course_ids))
    )
    user_ids = [row[0] for row in result.fetchall()]

    success, fail = 0, 0
    for user_id in user_ids:
        try:
            if photo:
                if len(text) <= 1024:
                    await bot.send_photo(chat_id=user_id, photo=photo, caption=text)
                else:
                    await bot.send_photo(chat_id=user_id, photo=photo, caption=None)
                    await bot.send_message(chat_id=user_id, text=text)
            else:
                await bot.send_message(chat_id=user_id, text=text)

            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            fail += 1

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–∫–∏: {fail}",
    )
    await state.clear()


@admin_broadcast_router.message(BroadcastState.confirmation, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_broadcast(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
