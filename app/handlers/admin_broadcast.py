import os
from pathlib import Path
from aiofiles import open as aio_open
from aiogram.types import FSInputFile, CallbackQuery, InlineKeyboardMarkup
from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.testing.suite.test_reflection import users

from app.filters.chat_types import ChatTypeFilter, IsAdmin
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from sqlalchemy import select, func
import time
from collections import defaultdict
from app.fsm_states import BroadcastState
from app.keyboards.inline import projects_keyboard, bc_courses_keyboard
from app.keyboards.reply import kb_admin_main
from database.models import User, Specialization, Course, Broadcast, Project, BroadcastCourseAssociation
import logging
from typing import Union, Optional
logger = logging.getLogger(__name__)



admin_broadcast_router = Router()
admin_broadcast_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


async def send_photo_with_caption(
    recipient_id: int,
    photo: Union[str, FSInputFile],
    text: str,
    bot: Bot,
    reply_markup: Optional[InlineKeyboardMarkup] = None
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"""
    try:
        # –ï—Å–ª–∏ photo - —ç—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if isinstance(photo, str) and os.path.exists(photo):
            photo_file = FSInputFile(photo)
            if len(text) <= 1024:
                await bot.send_photo(
                    chat_id=recipient_id,
                    photo=photo_file,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            else:
                await bot.send_photo(
                    chat_id=recipient_id,
                    photo=photo_file,
                    parse_mode="HTML"
                )
                await bot.send_message(
                    chat_id=recipient_id,
                    text=text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
        else:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ file_id
            if len(text) <= 1024:
                await bot.send_photo(
                    chat_id=recipient_id,
                    photo=photo,
                    caption=text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
            else:
                await bot.send_photo(
                    chat_id=recipient_id,
                    photo=photo,
                    parse_mode="HTML"
                )
                await bot.send_message(
                    chat_id=recipient_id,
                    text=text,
                    parse_mode="HTML",
                    reply_markup=reply_markup
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        raise


MEDIA_DIR = 'media/images'
Path(MEDIA_DIR).mkdir(parents=True, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç


@admin_broadcast_router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    sent_msg = await message.answer(
        "<b>üì® –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>",
        parse_mode="HTML"
    )
    await state.update_data(instruction_msg_id=sent_msg.message_id)
    await state.set_state(BroadcastState.waiting_for_text)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
@admin_broadcast_router.message(BroadcastState.waiting_for_text)
async def get_broadcast_text(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(text=message.text)

    builder = InlineKeyboardBuilder()
    builder.button(text="üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="skip_photo")


    await message.answer("<b>üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>",
                         parse_mode="HTML",
                         reply_markup=builder.as_markup()
                         )
    await state.set_state(BroadcastState.waiting_for_photo)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
@admin_broadcast_router.callback_query(
    BroadcastState.waiting_for_photo,
    F.data == "skip_photo"
)
async def skip_photo_handler(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await state.update_data(photo=None)
    # await callback.message.delete()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    keyboard = await projects_keyboard(session)
    await callback.message.answer("<b>üìå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
                                 parse_mode="HTML",
                                  reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(BroadcastState.waiting_for_project)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@admin_broadcast_router.message(BroadcastState.waiting_for_photo)
async def get_broadcast_photo(message: Message, state: FSMContext,
                              session: AsyncSession, bot: Bot):
    data = await state.get_data()

    photo_path = None
    if message.photo:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        ext = os.path.splitext(file_path)[1] or '.jpg'
        filename = f"broadcast_{int(time.time())}{ext}"
        photo_path = os.path.join(MEDIA_DIR, filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, photo_path)
    else:
        await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'.")
        return

    await state.update_data(photo=photo_path)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    keyboard = await projects_keyboard(session)
    await message.answer("<b>üìå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
                         parse_mode="HTML",
                         reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(BroadcastState.waiting_for_project)


# –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
@admin_broadcast_router.callback_query(BroadcastState.waiting_for_project,
                                       F.data.startswith("project_"))
async def select_project(callback: CallbackQuery, state: FSMContext,
                         session: AsyncSession):
    project_id = callback.data.replace("project_", "").strip()
    if not project_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –ë–î
    result = await session.execute(
        select(Project)
        .where(Project.id == int(project_id))
    )
    project = result.scalar_one_or_none()

    if not project:
        await callback.answer("‚ö† –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                              show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    await state.update_data(
        project_id=project.id,
        project_title=project.title
    )
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ markup
    courses_kb = await bc_courses_keyboard(session)
    await callback.answer()
    await callback.message.answer(
        f"–ü—Ä–æ–µ–∫—Ç: <b>{project.title}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML",
        reply_markup=courses_kb.as_markup()
    )

    await state.set_state(BroadcastState.waiting_for_courses)


# –í—ã–±–æ—Ä –∫—É—Ä—Å–æ–≤
@admin_broadcast_router.callback_query(
    BroadcastState.waiting_for_courses,
    F.data.startswith("bccourse_")
)
async def select_course(callback: CallbackQuery, state: FSMContext,
                        session: AsyncSession):
    try:
        course_id = int(callback.data.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        selected_courses = data.get("selected_courses", [])

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏–∑ –ë–î
        result = await session.execute(select(Course).where(Course.id == course_id))
        course = result.scalar_one_or_none()

        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∫—É—Ä—Å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        if course.id in selected_courses:
            selected_courses.remove(course.id)
        else:
            selected_courses.append(course.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(selected_courses=selected_courses)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        search_query = data.get("course_search_query")
        current_page = data.get("course_page", 0)
        keyboard = await bc_courses_keyboard(
            session,
            search_query=search_query,
            page=current_page,
            selected_ids=selected_courses
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_reply_markup(
            reply_markup=keyboard.as_markup()
        )

        await callback.answer()

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞", show_alert=True)
        print(f"Error in select_course: {e}")


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤
@admin_broadcast_router.callback_query(
    BroadcastState.waiting_for_courses,
    F.data.startswith("bcpage_")
)
async def courses_page_handler(callback: CallbackQuery, state: FSMContext,
                               session: AsyncSession):
    try:
        _, page, search_query = callback.data.split("_", 2)
        page = int(page)
        if search_query == "":
            search_query = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await state.update_data(
            course_page=page,
            course_search_query=search_query
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
        data = await state.get_data()
        selected_courses = data.get("selected_courses", [])

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await bc_courses_keyboard(
            session,
            search_query=search_query,
            page=page,
            selected_ids=selected_courses
        )

        await callback.message.edit_reply_markup(
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
        print(f"Error in courses_page_handler: {e}")


# –ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞
@admin_broadcast_router.callback_query(
    BroadcastState.waiting_for_courses,
    F.data.startswith("courses_search")
)
async def search_courses_handler(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(BroadcastState.waiting_for_course_search)
        await callback.answer()
    except Exception as e:
        print(f"Error in search_courses_handler: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞", show_alert=True)


# –ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞
@admin_broadcast_router.message(BroadcastState.waiting_for_course_search)
async def process_search_query(message: Message, state: FSMContext,
                               session: AsyncSession):
    search_query = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await state.update_data(
        course_search_query=search_query,
        course_page=0
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    data = await state.get_data()
    selected_courses = data.get("selected_courses", [])

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
    keyboard = await bc_courses_keyboard(
        session,
        search_query=search_query,
        page=0,
        selected_ids=selected_courses
    )

    await message.answer(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{search_query}':",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(BroadcastState.waiting_for_courses)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤
@admin_broadcast_router.callback_query(
    BroadcastState.waiting_for_courses,
    F.data == "finish_courses_selection"
)
async def finish_courses_selection(callback: CallbackQuery,
                                   state: FSMContext,
                                   session: AsyncSession,
                                   bot: Bot):
    data = await state.get_data()
    text = data.get("text")
    photo = data.get("photo")
    project_id = data.get("project_id")
    selected_courses = data.get("selected_courses", [])

    if not selected_courses:
        await callback.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞!",
                              show_alert=True)
        return

    project = await session.get(Project, project_id)
    if not project:
        await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    result = await session.execute(
        select(Course)
        .where(Course.id.in_(selected_courses))
    )
    courses = result.scalars().all()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º –∫—É—Ä—Å–µ
    course_stats = []
    total_recipients = 0

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫—É—Ä—Å—É
    user_counts = await session.execute(
        select(
            Course.id,
            Course.name,
            func.count(User.id).label("user_count")
        )
        .join(User, User.course_id == Course.id)
        .where(Course.id.in_(selected_courses))
        .group_by(Course.id, Course.name)
    )

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    course_stats_data = {}
    for course_id, course_name, user_count in user_counts:
        course_stats_data[course_id] = {
            "name": course_name,
            "count": user_count
        }
        total_recipients += user_count

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for course in courses:
        count = course_stats_data.get(course.id, {}).get("count", 0)
        course_stats.append(f"‚Ä¢ {course.name} - {count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")

    message_text = (
            "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            f"üìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{text}\n\n"
            f"üìå <b>–ü—Ä–æ–µ–∫—Ç:</b> {project.title}\n\n"
            f"üéØ <b>–ö—É—Ä—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏:</b>\n" + "\n".join(course_stats) + "\n\n"
            f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> {total_recipients}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
    builder.adjust(2)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    try:
        if photo:
            await send_photo_with_caption(
                recipient_id=callback.message.chat.id,
                photo=photo,
                text=message_text,
                bot=bot,
                reply_markup=builder.as_markup()
            )
        else:
            await callback.message.answer(
                text=message_text,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}", exc_info=True)
        await callback.message.answer(
            "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            parse_mode="HTML"
        )

    await state.set_state(BroadcastState.confirmation)
    await callback.answer()


@admin_broadcast_router.callback_query(
    BroadcastState.confirmation,
    F.data == "confirm_broadcast"
)
async def confirm_broadcast(callback: CallbackQuery,
                            state: FSMContext,
                            session: AsyncSession,
                            bot: Bot):
    try:
        data = await state.get_data()
        text = data.get("text", "")
        photo = data.get("photo")
        project_id = data.get("project_id")
        selected_courses = data.get("selected_courses", [])

        if not selected_courses:
            await callback.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(
            select(User.tg_id, User.course_id)
            .where(User.course_id.in_(selected_courses))
        )
        users = result.all()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—É—Ä—Å–∞–º –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        course_stats = {}
        stats_result = await session.execute(
            select(
                Course.id,
                Course.name,
                func.count(User.id).label("total")
            )
            .join(User, User.course_id == Course.id)
            .where(Course.id.in_(selected_courses))
            .group_by(Course.id)
        )

        for course_id, name, total in stats_result:
            course_stats[course_id] = {
                "name": name,
                "total": total,
                "success": 0,
                "failed": 0
            }

        total_users = len(users)
        if not total_users:
            await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö!", show_alert=True)
            return

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        progress_msg = await callback.message.answer(
            f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        success_count = 0
        failed_count = 0

        for tg_id, course_id in users:
            try:
                if photo:
                    await send_photo_with_caption(
                        recipient_id=tg_id,
                        photo=photo,
                        text=text,
                        bot=bot
                    )
                else:
                    await bot.send_message(
                        chat_id=tg_id,
                        text=text,
                        parse_mode="HTML"
                    )
                success_count += 1
                course_stats[course_id]["success"] += 1
            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {tg_id}: {str(e)}", exc_info=True)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_lines = [
            "üìä <b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:</b>",
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}",
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}",
            f"‚ùå –û—à–∏–±–∫–∏: {failed_count}",
            "",
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º:</b>"
        ]

        for stats in course_stats.values():
            report_lines.append(
                f"‚Ä¢ {stats['name']}: {stats['success']}/{stats['total']} "
                f"(–æ—à–∏–±–æ–∫: {stats['failed']})"
            )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ë–î
        broadcast = Broadcast(
            text=text,
            image_path=photo,
            is_sent=True,
            project_id=project_id
        )
        await broadcast.set_course_ids(selected_courses, session)

        session.add(broadcast)
        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        try:
            await progress_msg.delete()
        except:
            pass

        await callback.message.answer(
            "\n".join(report_lines),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_broadcast: {str(e)}")
        await callback.answer(
            "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )
    finally:
        await state.clear()






@admin_broadcast_router.callback_query(
    BroadcastState.confirmation,
    F.data == "cancel_broadcast"
)
async def cancel_broadcast_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()
    await callback.answer()

