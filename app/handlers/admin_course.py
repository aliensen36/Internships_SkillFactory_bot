import logging
from aiogram import Router, F
from aiogram.filters import StateFilter, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from app.fsm_states import *
from app.keyboards.inline import admin_courses_menu, confirm_cancel_add_courses, confirm_cancel_edit_courses, \
    admin_main_menu, confirm_delete_courses
from database.models import *
from sqlalchemy import text
from sqlalchemy.exc import IntegrityError
from io import BytesIO
import pandas as pd
from aiogram.types import FSInputFile
from sqlalchemy.orm import selectinload
import tempfile
import os
from aiogram.types import BufferedInputFile





admin_course_router = Router()
admin_course_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å—ã"
@admin_course_router.callback_query(F.data == "admin_courses")
async def courses(callback: CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫—É—Ä—Å–æ–≤
        await callback.message.answer(
            text="<b>üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await admin_courses_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


@admin_course_router.callback_query(F.data == "courses:list")
async def view_courses(callback: CallbackQuery,
                       session: AsyncSession):
    try:
        result = await (session
                        .execute(select(Specialization)
                                 .options(selectinload(Specialization.courses)))
                        )
        specializations = result.scalars().all()

        if not specializations:
            await callback.message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫—É—Ä—Å–æ–≤.")
            return

        text = "<b>–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤</b>:\n\n"

        for spec in specializations:
            text += f"üî∏ <b>{spec.name}</b>:\n"
            if spec.courses:
                for course in spec.courses:
                    text += f"  ‚Ä¢ {course.name}\n"
            else:
                text += "  (–∫—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç)\n"
            text += "\n"

        await callback.message.answer(text,
                                      reply_markup=await admin_courses_menu(),
                                      parse_mode="HTML")

        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤")
        logging.error(f"Error in view_courses: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel
@admin_course_router.callback_query(F.data == "courses:export")
async def export_courses_to_excel(callback: CallbackQuery, session: AsyncSession):
    try:
        await callback.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        result = await session.execute(
            select(Course)
            .options(selectinload(Course.specialization))
            .order_by(Course.specialization_id, Course.id)
        )
        courses = result.scalars().all()

        if not courses:
            await callback.message.answer("‚ùó –ù–µ—Ç –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
        data = []
        for course in courses:
            data.append({
                "ID": course.id,
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞": course.name,
                "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": course.specialization.name if course.specialization else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                "ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏": course.specialization_id
            })

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
            with pd.ExcelWriter(tmp.name, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='–ö—É—Ä—Å—ã')

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                worksheet = writer.sheets['–ö—É—Ä—Å—ã']
                for idx, col in enumerate(df.columns):
                    max_len = max(df[col].astype(str).map(len).max(), len(col)) + 2
                    worksheet.set_column(idx, idx, max_len)

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–∞–º—è—Ç—å
            tmp.seek(0)
            excel_data = tmp.read()

        # –°–æ–∑–¥–∞–µ–º BufferedInputFile
        excel_file = BufferedInputFile(excel_data, filename="courses_export.xlsx")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer_document(
            document=excel_file,
            caption=f"üìä –í—ã–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ ({len(courses)} –∑–∞–ø–∏—Å–µ–π)"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤ –≤ Excel: {e}", exc_info=True)
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'tmp' in locals() and os.path.exists(tmp.name):
            os.unlink(tmp.name)
        await callback.answer()


# =====================================================================================
# ----------------------------------- –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å -----------------------------------
# =====================================================================================



@admin_course_router.callback_query(F.data == "courses:add")
async def add_course_start(callback: CallbackQuery,
                           state: FSMContext,
                           session: AsyncSession,):
    result = await session.execute(select(Specialization))
    specializations = result.scalars().all()

    if not specializations:
        await callback.message.answer("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π. "
                                      "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=spec.name,
                callback_data=f"select_spec_{spec.id}")
            ]
            for spec in specializations
        ])


    await state.set_state(CourseAddState.waiting_for_specialization)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫—É—Ä—Å:", reply_markup=kb)
    await callback.answer()


@admin_course_router.callback_query(CourseAddState.waiting_for_specialization,
                                    F.data.startswith("select_spec_"))
async def select_specialization(callback: CallbackQuery,
                                  state: FSMContext,
                                  session: AsyncSession):
    spec_id = int(callback.data.split("_")[-1])
    await state.update_data(specialization_id=spec_id)

    await state.set_state(CourseAddState.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:")
    await callback.answer()


@admin_course_router.message(CourseAddState.waiting_for_name)
async def enter_course_name(message: Message,
                            state: FSMContext,
                            session: AsyncSession):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    course_name = message.text.strip()
    data = await state.get_data()
    spec_id = data['specialization_id']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    existing_course = await session.execute(
        select(Course)
        .where(
            and_(
                Course.name.ilike(course_name),
                Course.specialization_id == spec_id
            )
        )
    )
    existing_course = existing_course.scalar_one_or_none()

    if existing_course:
        await message.answer(
            f"‚ùå –ö—É—Ä—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>'{course_name}'</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç "
            f"–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            parse_mode="HTML"
        )
        return

    await state.update_data(course_name=course_name)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    result = await session.execute(
        select(Specialization)
        .where(Specialization.id == spec_id)
    )
    specialization = result.scalar_one_or_none()

    if not specialization:
        await message.answer("–û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    await state.set_state(CourseAddState.waiting_for_confirmation)

    await message.answer(
        f"<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞</b>\n\n"
        f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <b>{specialization.name}</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: <b>{course_name}</b>\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏.",
        parse_mode="HTML",
        reply_markup=await confirm_cancel_add_courses()
    )


@admin_course_router.callback_query(CourseAddState.waiting_for_confirmation,
                                    F.data == "confirm_add_course")
async def confirm_add_course(callback: CallbackQuery,
                             state: FSMContext,
                             session: AsyncSession):
    data = await state.get_data()
    spec_id = data['specialization_id']
    course_name = data['course_name']

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    result = await session.execute(select(Specialization).where(Specialization.id == spec_id))
    specialization = result.scalar_one_or_none()

    try:
        new_course = Course(
            name=course_name,
            specialization_id=spec_id
        )
        session.add(new_course)
        await session.commit()

        await callback.message.answer(
            f"‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <b>{specialization.name}</b>\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: <b>{course_name}</b>",
            parse_mode="HTML",
            reply_markup=await admin_courses_menu()
        )

    except IntegrityError as e:
        await session.rollback()

        if "courses_pkey" in str(e):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            try:
                reset_query = text(
                    "SELECT setval('courses_id_seq', "
                    "(SELECT MAX(id) FROM courses))"
                )
                await session.execute(reset_query)
                await session.commit()
                await callback.message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –∫—É—Ä—Å–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å —Å–Ω–æ–≤–∞.",
                    reply_markup=await admin_courses_menu()
                )
            except Exception as reset_error:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {reset_error}")
                await callback.message.answer(
                    "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=await admin_courses_menu()
                )

        elif "unique constraint" in str(e).lower():
            await callback.message.answer(
                "‚ö†Ô∏è –ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                reply_markup=await admin_courses_menu()
            )

    except Exception as e:
        await session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}", exc_info=True)
        await callback.message.answer(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞",
            reply_markup=await admin_courses_menu()
        )

    finally:
        await callback.answer()
        await state.clear()


@admin_course_router.callback_query(F.data == "cancel_add_course")
async def cancel_add_course(callback: CallbackQuery,
                            state: FSMContext):
    await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await admin_courses_menu())
    await callback.answer()
    await state.clear()




# =====================================================================================
# ------------------------------------- –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å ---------------------------------
# =====================================================================================



@admin_course_router.callback_query(F.data == "courses:edit")
async def edit_courses(callback: CallbackQuery,
                       state: FSMContext,
                       session: AsyncSession):
    await state.set_state(CourseEditState.waiting_for_specialization_selection)
    try:
        await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞")
        await callback.answer()

        result = await session.execute(select(Specialization))
        specializations = result.scalars().all()

        if not specializations:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for specialization in specializations:
            builder.button(
                text=f"{specialization.name}",
                callback_data=f"edit_specialization_{specialization.id}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        builder.adjust(1, repeat=True)

        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫—É—Ä—Å</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        logging.error(f"Error in view_specializations: {e}")


@admin_course_router.callback_query(F.data.startswith("edit_specialization_"),
                                    CourseEditState.waiting_for_specialization_selection)
async def select_course_from_specialization(callback: CallbackQuery,
                                            state: FSMContext,
                                            session: AsyncSession):
    try:
        spec_id = int(callback.data.split("_")[-1])
        await state.update_data(specialization_id=spec_id)

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        result = await session.execute(
            select(Course)
            .where(Course.specialization_id == spec_id)
            .order_by(Course.name)
        )
        courses = result.scalars().all()

        if not courses:
            await callback.answer("‚ÑπÔ∏è –í —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤",
                                  show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
        builder = InlineKeyboardBuilder()

        for course in courses:
            builder.button(
                text=f"{course.name}",
                callback_data=f"select_course_{course.id}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.button(
            text="–ù–∞–∑–∞–¥",
            callback_data="back_to_specializations"
        )

        builder.adjust(1, repeat=True)

        await state.set_state(CourseEditState.waiting_for_course_selection)
        await callback.message.edit_text(
            "<b>–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in select_course_from_specialization: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤")
        await callback.answer()


@admin_course_router.callback_query(F.data == "back_to_specializations",
                                    CourseEditState.waiting_for_course_selection)
async def back_to_specializations(callback: CallbackQuery,
                                  state: FSMContext,
                                  session: AsyncSession):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    result = await session.execute(select(Specialization))
    specializations = result.scalars().all()

    builder = InlineKeyboardBuilder()
    for specialization in specializations:
        builder.button(
            text=f"{specialization.name}",
            callback_data=f"edit_specialization_{specialization.id}"
        )
    builder.adjust(1, repeat=True)

    await state.set_state(CourseEditState.waiting_for_specialization_selection)
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫—É—Ä—Å</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@admin_course_router.callback_query(F.data.startswith("select_course_"),
                                    CourseEditState.waiting_for_course_selection)
async def select_course_action(callback: CallbackQuery,
                               state: FSMContext,
                               session: AsyncSession):
    try:
        course_id = int(callback.data.split("_")[-1])
        await state.update_data(course_id=course_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
        result = await session.execute(
            select(Course)
            .where(Course.id == course_id)
        )
        course = result.scalar_one()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()

        builder.button(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞",
            callback_data="edit_course_name"
        )
        builder.button(
            text="–ù–∞–∑–∞–¥",
            callback_data="back_to_courses"
        )

        builder.adjust(1, repeat=True)

        await state.set_state(CourseEditState.waiting_for_name)
        await callback.message.edit_text(
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ <b>'{course.name}'</b>\n\n"
            "<b>–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>",
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in select_course_action: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞")
        await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_course_router.message(CourseEditState.waiting_for_name)
async def process_new_name(message: Message,
                           state: FSMContext):
    await state.update_data(new_name=message.text)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏:",
                         reply_markup=await confirm_cancel_edit_courses())
    await state.set_state(CourseEditState.waiting_for_confirmation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
@admin_course_router.callback_query(
    CourseEditState.waiting_for_confirmation,
    F.data == "confirm_edit_course")
async def confirm_edit_course(callback: CallbackQuery,
                              state: FSMContext,
                              session: AsyncSession):
    data = await state.get_data()

    if 'course_id' not in data:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    course = await session.get(Course, data['course_id'])
    if not course:
        await callback.message.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if 'new_name' in data:
        course.name = data['new_name']

    await session.commit()

    await callback.message.answer(
        f"–ö—É—Ä—Å <b>{course.name}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
        parse_mode="HTML",
        reply_markup=await admin_courses_menu()
    )
    await callback.answer()
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
@admin_course_router.callback_query(F.data == "cancel_edit_course")
async def cancel_edit_course(callback: CallbackQuery,
                             state: FSMContext,
                             session: AsyncSession):
    await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await admin_courses_menu())
    await callback.answer()
    await state.clear()





# =====================================================================================
# --------------------------------------- –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å --------------------------------
# =====================================================================================



@admin_course_router.callback_query(F.data == "courses:delete")
async def delete_course_start(callback: CallbackQuery,
                             state: FSMContext,
                             session: AsyncSession):
    try:
        result = await session.execute(select(Specialization))
        specializations = result.scalars().all()

        if not specializations:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç")
            return

        builder = InlineKeyboardBuilder()
        for specialization in specializations:
            builder.button(
                text=specialization.name,
                callback_data=f"delete_spec_{specialization.id}"
            )
        builder.adjust(1)

        await state.set_state(CourseDeleteState.waiting_for_specialization)
        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        logging.error(f"Error in delete_course_start: {e}")

@admin_course_router.callback_query(F.data.startswith("delete_spec_"),
                                   CourseDeleteState.waiting_for_specialization)
async def select_specialization(callback: CallbackQuery,
                               state: FSMContext,
                               session: AsyncSession):
    spec_id = int(callback.data.split("_")[-1])
    await state.update_data(spec_id=spec_id)

    result = await session.execute(
        select(Course)
        .where(Course.specialization_id == spec_id)
        .order_by(Course.name)
    )
    courses = result.scalars().all()

    if not courses:
        await callback.answer("‚ÑπÔ∏è –í —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.button(
            text=course.name,
            callback_data=f"delete_course_{course.id}"
        )
    builder.adjust(1)

    await state.set_state(CourseDeleteState.waiting_for_course)
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_course_router.callback_query(F.data == "delete_back_to_specs",
                                   CourseDeleteState.waiting_for_course)
async def back_to_specializations(callback: CallbackQuery,
                                 state: FSMContext,
                                 session: AsyncSession):
    result = await session.execute(select(Specialization))
    specializations = result.scalars().all()

    builder = InlineKeyboardBuilder()
    for specialization in specializations:
        builder.button(
            text=specialization.name,
            callback_data=f"delete_spec_{specialization.id}"
        )
    builder.adjust(1)

    await state.set_state(CourseDeleteState.waiting_for_specialization)
    await callback.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:</b>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_course_router.callback_query(F.data.startswith("delete_course_"),
                                   CourseDeleteState.waiting_for_course)
async def confirm_course_delete(callback: CallbackQuery,
                               state: FSMContext,
                               session: AsyncSession):
    course_id = int(callback.data.split("_")[-1])
    await state.update_data(course_id=course_id)

    result = await session.execute(
        select(Course)
        .where(Course.id == course_id)
    )
    course = result.scalar_one()

    await state.set_state(CourseDeleteState.waiting_for_confirmation)
    await callback.message.edit_text(
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞:</b>\n\n"
        f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <b>{course.specialization.name}</b>\n"
        f"–ö—É—Ä—Å: <b>{course.name}</b>\n\n",
        reply_markup=await confirm_delete_courses(),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_course_router.callback_query(F.data == "delete_—Åourses:cancel",
                                   StateFilter(CourseDeleteState))
async def cancel_deletion(callback: CallbackQuery,
                         state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await admin_courses_menu()
    )
    await callback.answer()

@admin_course_router.callback_query(F.data == "delete_—Åourses:confirm",
                                   CourseDeleteState.waiting_for_confirmation)
async def process_course_deletion(callback: CallbackQuery,
                                 state: FSMContext,
                                 session: AsyncSession):
    data = await state.get_data()
    course_id = data['course_id']

    try:
        result = await session.execute(
            select(Course)
            .where(Course.id == course_id)
        )
        course = result.scalar_one()

        await session.delete(course)
        await session.commit()

        await callback.message.edit_text(
            f"‚úÖ –ö—É—Ä—Å <b>{course.name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await admin_courses_menu()
        )
    except Exception as e:
        await callback.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞",
            reply_markup=await admin_courses_menu()
        )
        logging.error(f"Error in process_course_deletion: {e}")
    finally:
        await state.clear()
        await callback.answer()




# =====================================================================================
# ---------------------------------------- –ù–∞–∑–∞–¥ -------------------------------------
# =====================================================================================



@admin_course_router.callback_query(F.data == "courses:admin_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é",
                                  reply_markup=await admin_main_menu())
    await callback.answer()

