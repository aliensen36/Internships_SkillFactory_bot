import logging

from aiogram import Router, F
from aiogram.filters import StateFilter, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from app.fsm_states import *
from app.keyboards.inline import admin_courses_menu
from database.models import *

admin_course_router = Router()
admin_course_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å—ã"
@admin_course_router.callback_query(F.data == "admin_courses")
async def courses(callback: CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –∫—É—Ä—Å–æ–≤
        await callback.message.answer(
            text="<b>üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await admin_courses_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


@admin_course_router.callback_query(F.data == "courses:list")
async def view_courses(callback: CallbackQuery,
                       session: AsyncSession):
    try:
        result = await (session
                        .execute(select(Specialization)
                                 .options(selectinload(Specialization.courses)))
                        )
        specializations = result.scalars().all()

        if not specializations:
            await callback.message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫—É—Ä—Å–æ–≤.")
            return

        text = "<b>–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤</b>:\n\n"

        for spec in specializations:
            text += f"üî∏ <b>{spec.name}</b>:\n"
            if spec.courses:
                for course in spec.courses:
                    text += f"  ‚Ä¢ {course.name}\n"
            else:
                text += "  (–∫—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç)\n"
            text += "\n"

        await callback.message.answer(text,
                                      reply_markup=await admin_courses_menu(),
                                      parse_mode="HTML")

        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤")
        logging.error(f"Error in view_courses: {e}")




# =====================================================================================
# ----------------------------------- –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å -----------------------------------
# =====================================================================================



@admin_course_router.callback_query(F.data == "courses:add")
async def add_course_start(callback: CallbackQuery,
                           state: FSMContext,
                           session: AsyncSession,):
    result = await session.execute(select(Specialization))
    specializations = result.scalars().all()

    if not specializations:
        await callback.message.answer("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π. "
                                      "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=spec.name,
                callback_data=f"select_spec_{spec.id}")
            ]
            for spec in specializations
        ])


    await state.set_state(CourseAddState.waiting_for_specialization)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫—É—Ä—Å:", reply_markup=kb)
    await callback.answer()
