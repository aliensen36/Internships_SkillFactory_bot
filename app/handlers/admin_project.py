import logging
from aiogram import F, Router
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from app.fsm_states import ProjectAddState, ProjectEditState, ProjectDeleteState
from app.keyboards.inline import admin_projects_menu, confirm_cancel_projects
from app.keyboards.reply import kb_admin_main, confirm_cancel_keyboard, confirm_delete_keyboard
from database.models import Project


admin_project_router = Router()
admin_project_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–µ–∫—Ç—ã"
@admin_project_router.callback_query(F.data == "admin_projects")
async def show_projects_menu(callback: CallbackQuery,):
    try:
        # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
        await callback.message.answer(
            text="<b>üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await admin_projects_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        # logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_projects_button: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


@admin_project_router.callback_query(F.data == "projects:list")
async def view_projects(callback: CallbackQuery,
                        session: AsyncSession):
    try:
        result = await session.execute(select(Project))
        projects = result.scalars().all()

        if not projects:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
            return

        projects_list = "\n".join(
            f"{project.title}\n"
            for project in projects
        )

        await callback.message.answer(
            f"<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤</b>:\n\n{projects_list}\n\n",
            reply_markup=await admin_projects_menu(),
            parse_mode="HTML"
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        logging.error(f"Error in view_projects: {e}")



# =====================================================================================
# ------------------------------------ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç --------------------------------
# =====================================================================================



@admin_project_router.callback_query(F.data == "projects:add")
async def add_project_start(callback: CallbackQuery,
                           state: FSMContext):
    await state.set_state(ProjectAddState.waiting_for_title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    await callback.answer()

@admin_project_router.message(ProjectAddState.waiting_for_title)
async def add_project_title(message: Message,
                            state: FSMContext,
                            session: AsyncSession):
    project_title = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    existing_project = await session.execute(
        select(Project).where(Project.title.ilike(project_title)))
    existing_project = existing_project.scalar_one_or_none()

    if existing_project:
    # –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await message.answer(
            f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{project_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await state.update_data(title=message.text)
    await state.set_state(ProjectAddState.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")


@admin_project_router.message(ProjectAddState.waiting_for_description)
async def add_project_description(message: Message,
                                  state: FSMContext,
                                  session: AsyncSession):
    await state.update_data(description=message.text)
    await state.set_state(ProjectAddState.waiting_for_benefit)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ:")


@admin_project_router.message(ProjectAddState.waiting_for_benefit)
async def add_project_benefit(message: Message,
                              state: FSMContext,
                              session: AsyncSession):
    await state.update_data(benefit=message.text)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
    preview_message = (
        "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n"
        f"<b>–ë–µ–Ω–µ—Ñ–∏—Ç—ã:</b> {message.text}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"
    )

    await message.answer(preview_message,
                         reply_markup = await confirm_cancel_projects(),
                         parse_mode="HTML")
    await state.set_state(ProjectAddState.waiting_for_confirmation)


@admin_project_router.callback_query(ProjectAddState.waiting_for_confirmation,
                              F.data == "confirm_action")
async def confirm_project_add(callback: CallbackQuery,
                              state: FSMContext,
                              session: AsyncSession):
    data = await state.get_data()

    new_project = Project(
        title=data["title"],
        description=data["description"],
        benefit=data["benefit"]
    )

    session.add(new_project)
    await session.commit()

    await callback.message.answer("‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!",
                         reply_markup=await admin_projects_menu())
    await callback.answer()
    await state.clear()


@admin_project_router.callback_query(F.data == "cancel_action")
async def confirm_project_add(callback: CallbackQuery,
                              state: FSMContext,
                              session: AsyncSession):
    await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await admin_projects_menu())



# =====================================================================================
# ------------------------------------ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç --------------------------------
# =====================================================================================



# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@admin_project_router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å",
                              ProjectEditState.waiting_for_project_selection)
@admin_project_router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å",
                              ProjectEditState.waiting_for_title)
@admin_project_router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å",
                              ProjectEditState.waiting_for_description)
@admin_project_router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å",
                              ProjectEditState.waiting_for_benefit)
@admin_project_router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å",
                              ProjectEditState.waiting_for_confirmation)
async def cancel_project_edit(message: Message,
                              state: FSMContext):
    await state.clear()
    await message.answer(
        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=projects_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# @admin_project_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
# async def cancel_without_active_edit(message: Message):
#     await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.")


@admin_project_router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å")
async def edit_project(message: Message,
                       state: FSMContext,
                       session: AsyncSession):
    await state.set_state(ProjectEditState.waiting_for_project_selection)
    try:
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                             reply_markup=confirm_cancel_keyboard)

        result = await session.execute(select(Project))
        projects = result.scalars().all()

        if not projects:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for project in projects:
            builder.button(
                text=f"{project.title}",
                callback_data=f"edit_project_{project.id}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        builder.adjust(1, repeat=True)

        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        logging.error(f"Error in view_projects: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_project_router.callback_query(ProjectEditState.waiting_for_project_selection,
                                     F.data.startswith("edit_project_"))
async def select_project_to_edit(callback: CallbackQuery,
                                 state: FSMContext,
                                 session: AsyncSession):
    try:
        project_id = int(callback.data.split("_")[-1])
        project = await session.get(Project, project_id)

        if not project:
            await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await state.update_data(
            project_id=project_id,
            current_title=project.title,
            current_content=project.description,
            current_benefit=project.benefit
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
        skip_title_edit_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                      callback_data="skip_title_edit")]
            ]
        )

        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:  <b>{project.title}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_title_edit_keyboard,
            parse_mode="HTML"
        )

        await callback.answer()
        await state.set_state(ProjectEditState.waiting_for_title)

    except Exception as e:
        logging.error(f"Error in select_project_to_edit: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                              show_alert=True)
        await session.rollback()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_project_router.callback_query(ProjectEditState.waiting_for_title,
                                     F.data == "skip_title_edit")
async def skip_title_edit(callback: CallbackQuery,
                          state: FSMContext):
    data = await state.get_data()
    await state.update_data(new_title=data.get('current_title'))

    skip_description_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                  callback_data="skip_description_edit")]
        ]
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_description_edit_kb
    )

    await callback.answer()
    await state.set_state(ProjectEditState.waiting_for_description)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_project_router.message(ProjectEditState.waiting_for_title)
async def process_new_title(message: Message,
                            state: FSMContext):
    await state.update_data(new_title=message.text)

    skip_description_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                  callback_data="skip_description_edit")]
        ]
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_description_edit_kb
    )
    await state.set_state(ProjectEditState.waiting_for_description)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@admin_project_router.callback_query(ProjectEditState.waiting_for_description,
                                     F.data == "skip_description_edit")
async def skip_description_edit(callback: CallbackQuery,
                            state: FSMContext):
    data = await state.get_data()
    await state.update_data(new_description=data.get('current_description'))

    skip_benefit_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                  callback_data="skip_benefit_edit")]
        ]
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_benefit_edit_kb
    )

    await callback.answer()
    await state.set_state(ProjectEditState.waiting_for_benefit)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@admin_project_router.message(ProjectEditState.waiting_for_description)
async def process_new_description(message: Message,
                                  state: FSMContext):
    await state.update_data(new_description=message.text)

    skip_benefit_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                  callback_data="skip_benefit_edit")]
        ]
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_benefit_edit_kb
    )
    await state.set_state(ProjectEditState.waiting_for_benefit)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤
@admin_project_router.callback_query(ProjectEditState.waiting_for_benefit,
                                     F.data == "skip_benefit_edit")
async def skip_benefit_edit(callback: CallbackQuery,
                            state: FSMContext,
                            session: AsyncSession):
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    preview_message = (
        "üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_title', data.get('current_title', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_content', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_description', data.get('current_content', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–ë–µ–Ω–µ—Ñ–∏—Ç—ã:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_benefit', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_benefit', data.get('current_benefit', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"
    )

    await callback.message.answer(
        preview_message,
        parse_mode="HTML",
        reply_markup=confirm_cancel_keyboard
    )
    await state.set_state(ProjectEditState.waiting_for_confirmation)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤
@admin_project_router.message(ProjectEditState.waiting_for_benefit)
async def process_new_benefit(message: Message,
                              state: FSMContext,
                              session: AsyncSession):
    await state.update_data(new_benefit=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    preview_message = (
        "üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_title', data.get('current_title', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_content', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_description', data.get('current_content', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–ë–µ–Ω–µ—Ñ–∏—Ç—ã:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_benefit', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_benefit', data.get('current_benefit', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"
    )

    await message.answer(
        preview_message,
        parse_mode="HTML",
        reply_markup=confirm_cancel_keyboard
    )
    await state.set_state(ProjectEditState.waiting_for_confirmation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
@admin_project_router.message(ProjectEditState.waiting_for_confirmation,
                              F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_project_edit(message: Message,
                               state: FSMContext,
                               session: AsyncSession):
    data = await state.get_data()

    if 'project_id' not in data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    project = await session.get(Project, data['project_id'])
    if not project:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if 'new_title' in data:
        project.title = data['new_title']
    if 'new_description' in data:
        project.description = data['new_description']
    if 'new_benefit' in data:
        project.benefit = data['new_benefit']

    await session.commit()

    await message.answer(
        f"–ü—Ä–æ–µ–∫—Ç <b>{project.title}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
        parse_mode="HTML",
        reply_markup=projects_menu_keyboard()
    )
    await state.clear()


# @admin_project_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
# async def cancel_without_active_process(message: Message):
#     await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.")


# =====================================================================================
# ------------------------------------ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç --------------------------------
# =====================================================================================



@admin_project_router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
async def delete_project_start(message: Message,
                         state: FSMContext,
                         session: AsyncSession):
    try:
        result = await session.execute(select(Project))
        projects = result.scalars().all()

        if not projects:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for project in projects:
            builder.button(
                text=f"{project.title}",
                callback_data=f"delete_project_{project.id}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        builder.adjust(1, repeat=True)

        await message.answer(
            "üìÇ <b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        logging.error(f"Error in view_projects: {e}")

    await state.set_state(ProjectDeleteState.waiting_for_delete)


@admin_project_router.callback_query(ProjectDeleteState.waiting_for_delete,
                                     F.data.startswith("delete_project_"))
async def select_project_to_delete(callback: CallbackQuery,
                                   state: FSMContext,
                                   session: AsyncSession):
    project_id = int(callback.data.split("_")[-1])
    project = await session.get(Project, project_id)

    if not project:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(project_id=project_id, project_title=project.title)
    await state.set_state(ProjectDeleteState.waiting_for_confirmation)

    await callback.message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:\n\n"
        f"<b>{project.title}</b>?",
        parse_mode="HTML",
        reply_markup=confirm_delete_keyboard
    )
    await callback.answer()


@admin_project_router.message(ProjectDeleteState.waiting_for_confirmation,
                              F.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")
async def confirm_project_delete(message: Message,
                                 state: FSMContext,
                                 session: AsyncSession):
    data = await state.get_data()
    project = await session.get(Project, data['project_id'])

    if project:
        await session.delete(project)
        await session.commit()
        await message.answer(
            f"üóëÔ∏è –ü—Ä–æ–µ–∫—Ç <b>{data['project_title']}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            parse_mode="HTML",
            reply_markup=projects_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω",
            reply_markup=projects_menu_keyboard()
        )

    await state.clear()


@admin_project_router.message(ProjectDeleteState.waiting_for_confirmation,
                              F.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_project_delete(message: Message,
                                state: FSMContext):
    data = await state.get_data()
    await message.answer(
        f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <b>{data.get('project_title', '')}</b> –æ—Ç–º–µ–Ω–µ–Ω–æ",
        parse_mode="HTML",
        reply_markup=projects_menu_keyboard()
    )
    await state.clear()






@admin_project_router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é",
                       reply_markup=kb_admin_main)
