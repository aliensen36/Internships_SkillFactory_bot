import io
import logging
from aiogram import F, Router
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, func
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from sqlalchemy.orm import selectinload
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from app.fsm_states import ProjectAddState, ProjectEditState, ProjectDeleteState
from app.handlers.admin import hide_urls, extract_urls
from app.keyboards.inline import admin_projects_menu, confirm_delete_keyboard, admin_main_menu, \
    confirm_cancel_add_projects, confirm_cancel_edit_projects
from app.keyboards.reply import kb_admin_main
from database.models import Project
import pandas as pd


admin_project_router = Router()
admin_project_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–µ–∫—Ç—ã"
@admin_project_router.callback_query(F.data == "admin_projects")
async def show_projects_menu(callback: CallbackQuery,):
    try:
        # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤
        await callback.message.answer(
            text="<b>üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await admin_projects_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        # logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_projects_button: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫"
@admin_project_router.callback_query(F.data == "projects:list")
async def view_projects(callback: CallbackQuery,
                        session: AsyncSession):
    try:
        result = await session.execute(select(Project))
        projects = result.scalars().all()

        if not projects:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
            return

        projects_list = "\n".join(
            f"{project.title}\n"
            for project in projects
        )

        await callback.message.answer(
            f"<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤</b>:\n\n{projects_list}\n\n",
            reply_markup=await admin_projects_menu(),
            parse_mode="HTML"
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        logging.error(f"Error in view_projects: {e}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel"
@admin_project_router.callback_query(F.data == "projects:export")
async def export_projects_to_excel(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = await session.execute(select(Project))
        projects = result.scalars().all()

        if not projects:
            await callback.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        data = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ": [],
            "–û–ø–∏—Å–∞–Ω–∏–µ": [],
            "–ë–µ–Ω–µ—Ñ–∏—Ç—ã": [],
            "–ü—Ä–∏–º–µ—Ä—ã": []
        }

        for project in projects:
            data["–ù–∞–∑–≤–∞–Ω–∏–µ"].append(project.title)
            data["–û–ø–∏—Å–∞–Ω–∏–µ"].append(
                project.raw_description if hasattr(project, 'raw_description') else project.description)
            data["–ë–µ–Ω–µ—Ñ–∏—Ç—ã"].append(project.raw_benefit if hasattr(project, 'raw_benefit') else project.benefit)
            data["–ü—Ä–∏–º–µ—Ä—ã"].append(project.raw_example if hasattr(project, 'raw_example') else project.example)

        df = pd.DataFrame(data)

        # –°–æ–∑–¥–∞–µ–º excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–ü—Ä–æ–µ–∫—Ç—ã')
            workbook = writer.book
            worksheet = writer.sheets['–ü—Ä–æ–µ–∫—Ç—ã']

            # –§–æ—Ä–º–∞—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            wrap_format = workbook.add_format({
                'text_wrap': True,
                'valign': 'top',    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ö—É
                'align': 'left'      # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            })

            # –§–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∂–∏—Ä–Ω—ã–π + –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ)
            header_format = workbook.add_format({
                'bold': True,
                'valign': 'top',
                'align': 'left',
                'text_wrap': True
            })

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)
            column_widths = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": 30,
                "–û–ø–∏—Å–∞–Ω–∏–µ": 50,
                "–ë–µ–Ω–µ—Ñ–∏—Ç—ã": 50,
                "–ü—Ä–∏–º–µ—Ä—ã": 50
            }

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É
            for i, column in enumerate(df.columns):
                worksheet.set_column(
                    i, i,
                    column_widths.get(column, 30),
                    wrap_format
                )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            for col_num, value in enumerate(df.columns.values):
                worksheet.write(0, col_num, value, header_format)

            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            for row_num in range(1, len(df) + 1):
                worksheet.set_row(row_num, None, wrap_format)

        output.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer_document(
            document=BufferedInputFile(output.read(), filename="projects_export.xlsx"),
            caption="üìä –í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ Excel"
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"Error in export_projects_to_excel: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤", show_alert=True)



# =====================================================================================
# ------------------------------------ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç --------------------------------
# =====================================================================================



@admin_project_router.callback_query(F.data == "projects:add")
async def add_project_start(callback: CallbackQuery,
                           state: FSMContext):
    await state.set_state(ProjectAddState.waiting_for_title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    await callback.answer()

@admin_project_router.message(ProjectAddState.waiting_for_title)
async def add_project_title(message: Message,
                            state: FSMContext,
                            session: AsyncSession):
    project_title = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    existing_project = await session.execute(
        select(Project).where(Project.title.ilike(project_title)))
    existing_project = existing_project.scalar_one_or_none()

    if existing_project:
    # –ü—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await message.answer(
            f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{project_title}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await state.update_data(title=message.text)
    await state.set_state(ProjectAddState.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")


@admin_project_router.message(ProjectAddState.waiting_for_description)
async def add_project_description(message: Message,
                                  state: FSMContext,
                                  session: AsyncSession):
    await state.update_data(description=message.text)
    await state.set_state(ProjectAddState.waiting_for_benefit)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ:")


@admin_project_router.message(ProjectAddState.waiting_for_benefit)
async def add_project_benefit(message: Message,
                              state: FSMContext,
                              session: AsyncSession):
    await state.update_data(benefit=message.text)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
    preview_message = (
        "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n\n"
        f"<b>–ë–µ–Ω–µ—Ñ–∏—Ç—ã:</b> {message.text}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"
    )

    await message.answer(preview_message,
                         reply_markup = await confirm_cancel_add_projects(),
                         parse_mode="HTML")
    await state.set_state(ProjectAddState.waiting_for_confirmation)


@admin_project_router.callback_query(ProjectAddState.waiting_for_confirmation,
                              F.data == "confirm_add_project")
async def confirm_project_add(callback: CallbackQuery,
                              state: FSMContext,
                              session: AsyncSession):
    data = await state.get_data()

    new_project = Project(
        title=data["title"],
        description=data["description"],
        benefit=data["benefit"]
    )

    session.add(new_project)
    await session.commit()

    await callback.message.answer("‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!",
                         reply_markup=await admin_projects_menu())
    await callback.answer()
    await state.clear()


@admin_project_router.callback_query(F.data == "cancel_add_project")
async def confirm_project_add(callback: CallbackQuery,
                              state: FSMContext):
    await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await admin_projects_menu())
    await callback.answer()
    await state.clear()



# =====================================================================================
# ------------------------------------ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç --------------------------------
# =====================================================================================




@admin_project_router.callback_query(F.data == "projects:edit")
async def edit_project(callback: CallbackQuery,
                       state: FSMContext,
                       session: AsyncSession):
    await state.set_state(ProjectEditState.waiting_for_project_selection)
    try:
        await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        await callback.answer()

        result = await session.execute(select(Project))
        projects = result.scalars().all()

        if not projects:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
            return

        builder = InlineKeyboardBuilder()
        for project in projects:
            builder.button(
                text=f"{project.title}",
                callback_data=f"edit_project_{project.id}"
            )

        builder.adjust(1, repeat=True)

        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        logging.error(f"Error in view_projects: {e}")


@admin_project_router.callback_query(ProjectEditState.waiting_for_project_selection,
                                     F.data.startswith("edit_project_"))
async def select_project_to_edit(callback: CallbackQuery,
                                 state: FSMContext,
                                 session: AsyncSession):
    try:
        project_id = int(callback.data.split("_")[-1])
        project = await session.get(Project, project_id)

        if not project:
            await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await state.update_data(
            project_id=project_id,
            current_title=project.title,
            current_description=project.description,
            current_benefit=project.benefit,
            current_example=project.example,
            current_raw_description=project.raw_description,
            current_raw_benefit=project.raw_benefit,
            current_raw_example=project.raw_example
        )

        skip_title_edit_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="skip_title_edit")],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞",
                    callback_data="back_to_project_selection")]
            ]
        )

        await callback.message.answer(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: <b>{project.title}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_title_edit_keyboard,
            parse_mode="HTML"
        )

        await callback.answer()
        await state.set_state(ProjectEditState.waiting_for_title)

    except Exception as e:
        logging.error(f"Error in select_project_to_edit: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        await session.rollback()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
@admin_project_router.callback_query(ProjectEditState.waiting_for_title,
                                     F.data == "back_to_project_selection")
async def back_to_project_selection(callback: CallbackQuery,
                                    state: FSMContext,
                                    session: AsyncSession):
    await edit_project(callback, state, session)


@admin_project_router.callback_query(ProjectEditState.waiting_for_title,
                                     F.data == "skip_title_edit")
async def skip_title_edit(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await state.update_data(new_title=data.get('current_title'))

        skip_description_edit_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="skip_description_edit")],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é",
                    callback_data="back_to_title_edit")]
            ]
        )

        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_description_edit_kb
        )
        await callback.answer()
        await state.set_state(ProjectEditState.waiting_for_description)
    except Exception as e:
        logging.error(f"Error in skip_title_edit: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_project_router.callback_query(ProjectEditState.waiting_for_description,
                                     F.data == "back_to_title_edit")
async def back_to_title_edit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    skip_title_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_title_edit")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞",
                callback_data="back_to_project_selection")]
        ]
    )

    await callback.message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: <b>{data.get('current_title', '')}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_title_edit_kb
    )
    await callback.answer()
    await state.set_state(ProjectEditState.waiting_for_title)


@admin_project_router.message(ProjectEditState.waiting_for_title)
async def process_new_title(message: Message, state: FSMContext):
    await state.update_data(new_title=message.text)

    skip_description_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_description_edit")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é",
                callback_data="back_to_title_edit")]
        ]
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_description_edit_kb
    )
    await state.set_state(ProjectEditState.waiting_for_description)


@admin_project_router.callback_query(ProjectEditState.waiting_for_description, F.data == "skip_description_edit")
async def skip_description_edit(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await state.update_data(
            new_description=data.get('current_description', ''),
            new_raw_description=data.get('current_raw_description', '')
        )

        skip_benefit_edit_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="skip_benefit_edit")],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é",
                    callback_data="back_to_description_edit")]
            ]
        )

        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_benefit_edit_kb
        )
        await callback.answer()
        await state.set_state(ProjectEditState.waiting_for_benefit)
    except Exception as e:
        logging.error(f"Error in skip_description_edit: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–ø–∏—Å–∞–Ω–∏—è
@admin_project_router.callback_query(ProjectEditState.waiting_for_benefit,
                                     F.data == "back_to_description_edit")
async def back_to_description_edit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    skip_description_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_description_edit")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é",
                callback_data="back_to_title_edit")]
        ]
    )

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_description_edit_kb
    )
    await callback.answer()
    await state.set_state(ProjectEditState.waiting_for_description)


@admin_project_router.message(ProjectEditState.waiting_for_description)
async def process_new_description(message: Message, state: FSMContext):
    processed_text = hide_urls(message.text)
    await state.update_data(
        new_description=processed_text,
        new_raw_description=message.text
    )


    skip_benefit_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_benefit_edit")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é",
                callback_data="back_to_description_edit")]
        ]
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_benefit_edit_kb
    )
    await state.set_state(ProjectEditState.waiting_for_benefit)


@admin_project_router.callback_query(ProjectEditState.waiting_for_benefit, F.data == "skip_benefit_edit")
async def skip_benefit_edit(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await state.update_data(
            new_benefit=data.get('current_benefit', ''),
            new_raw_benefit=data.get('current_raw_benefit', '')
        )

        skip_example_edit_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="skip_example_edit")],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–µ–Ω–µ—Ñ–∏—Ç–∞–º",
                    callback_data="back_to_benefit_edit")]
            ]
        )

        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_example_edit_kb
        )
        await callback.answer()
        await state.set_state(ProjectEditState.waiting_for_example)
    except Exception as e:
        logging.error(f"Error in skip_benefit_edit: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@admin_project_router.message(ProjectEditState.waiting_for_benefit)
async def process_new_benefit(message: Message, state: FSMContext):
    urls = extract_urls(message.text)
    await state.update_data(
        new_benefit=hide_urls(message.text),
        new_raw_benefit=message.text,
        benefit_urls=urls
    )

    skip_example_edit_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                callback_data="skip_example_edit")],
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –±–µ–Ω–µ—Ñ–∏—Ç–∞–º",
                callback_data="back_to_benefit_edit")]
        ]
    )

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=skip_example_edit_kb
    )
    await state.set_state(ProjectEditState.waiting_for_example)

@admin_project_router.callback_query(ProjectEditState.waiting_for_example, F.data == "back_to_benefit_edit")
async def back_to_benefit_edit(callback: CallbackQuery, state: FSMContext):
    try:
        skip_benefit_edit_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="skip_benefit_edit")],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é",
                    callback_data="back_to_description_edit")]
            ]
        )

        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–Ω–µ—Ñ–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
            reply_markup=skip_benefit_edit_kb
        )
        await callback.answer()
        await state.set_state(ProjectEditState.waiting_for_benefit)
    except Exception as e:
        logging.error(f"Error in back_to_benefit_edit: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@admin_project_router.callback_query(ProjectEditState.waiting_for_example,
                                     F.data == "skip_example_edit")
async def skip_example_edit(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await state.update_data(
        new_example=data.get('current_example', ''),
        new_raw_example=data.get('current_raw_example', '')
    )

    preview_message = (
        "üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_title', data.get('current_title', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_description', data.get('current_description', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–ë–µ–Ω–µ—Ñ–∏—Ç—ã:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_benefit', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_benefit', data.get('current_benefit', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_example', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_example', data.get('current_example', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"
    )

    await callback.message.answer(
        preview_message,
        parse_mode="HTML",
        reply_markup=await confirm_cancel_edit_projects(),
        disable_web_page_preview=True
    )
    await callback.answer()
    await state.set_state(ProjectEditState.waiting_for_confirmation)


@admin_project_router.message(ProjectEditState.waiting_for_example)
async def process_new_example(message: Message, state: FSMContext, session: AsyncSession):
    urls = extract_urls(message.text)
    await state.update_data(
        new_example=hide_urls(message.text),
        new_raw_example=message.text,
        example_urls=urls
    )

    data = await state.get_data()
    preview_message = (
        "üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_title', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_title', data.get('current_title', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_description', data.get('current_description', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–ë–µ–Ω–µ—Ñ–∏—Ç—ã:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_benefit', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_benefit', data.get('current_benefit', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        f"–ë—ã–ª–æ: {data.get('current_example', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–°—Ç–∞–ª–æ: {data.get('new_example', data.get('current_example', '–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ'))}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"
    )

    await message.answer(
        preview_message,
        parse_mode="HTML",
        reply_markup=await confirm_cancel_edit_projects(),
        disable_web_page_preview=True
    )
    await state.set_state(ProjectEditState.waiting_for_confirmation)


@admin_project_router.callback_query(ProjectEditState.waiting_for_confirmation,
                                     F.data == "confirm_edit_project")
async def confirm_project_edit(callback: CallbackQuery,
                               state: FSMContext,
                               session: AsyncSession):
    data = await state.get_data()

    if 'project_id' not in data:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    project = await session.get(Project, data['project_id'])
    if not project:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if 'new_title' in data:
        project.title = data['new_title']
    if 'new_description' in data:
        project.description = data['new_description']
        project.raw_description = data.get('new_raw_description', data['new_description'])
    if 'new_benefit' in data:
        project.benefit = data['new_benefit']
        project.raw_benefit = data.get('new_raw_benefit', data['new_benefit'])
    if 'new_example' in data:
        project.example = data['new_example']
        project.raw_example = data.get('new_raw_example', data['new_example'])

    await session.commit()

    await callback.message.answer(
        f"–ü—Ä–æ–µ–∫—Ç <b>{project.title}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
        parse_mode="HTML",
        reply_markup=await admin_projects_menu()
    )
    await callback.answer()
    await state.clear()


@admin_project_router.callback_query(F.data == "cancel_edit_project")
async def cancel_project_edit(callback: CallbackQuery,
                               state: FSMContext,
                               session: AsyncSession):
    await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await admin_projects_menu())
    await callback.answer()
    await state.clear()




# =====================================================================================
# ------------------------------------ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç --------------------------------
# =====================================================================================



@admin_project_router.callback_query(F.data == "projects:delete")
async def delete_project_start(callback: CallbackQuery,
                               state: FSMContext,
                               session: AsyncSession):
    try:
        result = await session.execute(select(Project))
        projects = result.scalars().all()

        if not projects:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for project in projects:
            builder.button(
                text=f"{project.title}",
                callback_data=f"delete_project_{project.id}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        builder.adjust(1, repeat=True)

        await callback.message.answer(
            "üìÇ <b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        logging.error(f"Error in view_projects: {e}")
        await callback.answer()

    await state.set_state(ProjectDeleteState.waiting_for_delete)


@admin_project_router.callback_query(ProjectDeleteState.waiting_for_delete,
                                     F.data.startswith("delete_project_"))
async def select_project_to_delete(callback: CallbackQuery,
                                   state: FSMContext,
                                   session: AsyncSession):
    project_id = int(callback.data.split("_")[-1])
    project = await session.get(Project, project_id)

    if not project:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(project_id=project_id, project_title=project.title)
    await state.set_state(ProjectDeleteState.waiting_for_confirmation)

    await callback.message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç  <b>{project.title}</b>?",
        parse_mode="HTML",
        reply_markup=await confirm_delete_keyboard()
    )
    await callback.answer()


@admin_project_router.callback_query(ProjectDeleteState.waiting_for_confirmation,
                              F.data == "delete_projects:confirm")
async def confirm_project_delete(callback: CallbackQuery,
                                 state: FSMContext,
                                 session: AsyncSession):
    data = await state.get_data()
    project = await session.get(Project, data['project_id'])

    if project:
        await session.delete(project)
        await session.commit()
        await callback.message.answer(
            f"üóëÔ∏è –ü—Ä–æ–µ–∫—Ç <b>{data['project_title']}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            parse_mode="HTML",
            reply_markup=await admin_projects_menu()
        )
        await callback.answer()
    else:
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω",
            reply_markup=await admin_projects_menu()
        )
        await callback.answer()

    await state.clear()


@admin_project_router.callback_query(ProjectDeleteState.waiting_for_confirmation,
                                     F.data == "delete_projects:cancel")
async def cancel_project_delete(callback: CallbackQuery,
                                state: FSMContext):
    data = await state.get_data()
    await callback.message.answer(
        f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ <b>{data.get('project_title', '')}</b> –æ—Ç–º–µ–Ω–µ–Ω–æ",
        parse_mode="HTML",
        reply_markup=await admin_projects_menu()
    )
    await callback.answer()
    await state.clear()



# =====================================================================================
# ---------------------------------------- –ù–∞–∑–∞–¥ -------------------------------------
# =====================================================================================



@admin_project_router.callback_query(F.data == "projects:admin_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é",
                                  reply_markup=await admin_main_menu())
    await callback.answer()
