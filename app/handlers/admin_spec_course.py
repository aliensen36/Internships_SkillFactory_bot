from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from app.filters.chat_types import ChatTypeFilter, IsAdmin
from app.fsm_states import *
from app.keyboards.reply import kb_specializations_courses, kb_specializations, kb_courses
from database.models import *

admin_spec_course_router = Router()
admin_spec_course_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìö –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫—É—Ä—Å—ã"
@admin_spec_course_router.message(F.text == "üìö –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫—É—Ä—Å—ã")
async def specializations_and_courses(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                         reply_markup=kb_specializations_courses)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'
@admin_spec_course_router.message(F.text == 'üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
async def specializations(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                         reply_markup=kb_specializations)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä'
@admin_spec_course_router.message(F.text == 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä')
async def view_specializations(message: Message, session: AsyncSession):
    result = await session.execute(select(Specialization))
    specializations = result.scalars().all()

    if not specializations:
        await message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return

    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
    text = "üìö –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π:\n\n"
    for spec in specializations:
        text += f"{spec.name}\n\n"

    await message.answer(text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å'
@admin_spec_course_router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å')
async def add_specialization_start(message: Message, state: FSMContext):
    await state.set_state(SpecializationState.waiting_for_specialization_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
@admin_spec_course_router.message(SpecializationState.waiting_for_specialization_name)
async def add_specialization_save(message: Message, state: FSMContext, session: AsyncSession):
    name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    existing = await session.execute(
        select(Specialization).where(Specialization.name == name)
    )
    if existing.scalar():
        await message.answer("‚ùó –¢–∞–∫–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    new_specialization = Specialization(name=name)
    session.add(new_specialization)
    await session.commit()

    await message.answer(f"‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                         parse_mode="HTML",
                         reply_markup=kb_specializations)
    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üìö –ö—É—Ä—Å—ã'
@admin_spec_course_router.message(F.text == 'üìö –ö—É—Ä—Å—ã')
async def courses(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                         reply_markup=kb_courses)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Å–º–æ—Ç—Ä üëÅÔ∏è'
@admin_spec_course_router.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä üëÅÔ∏è')
async def view_courses(message: Message, session: AsyncSession):
    result = await session.execute(select(Specialization).options(selectinload(Specialization.courses)))
    specializations = result.scalars().all()

    if not specializations:
        await message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫—É—Ä—Å–æ–≤.")
        return

    text = "üìö –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –∏ –∫—É—Ä—Å–æ–≤:\n\n"

    for spec in specializations:
        text += f"üî∏ <b>{spec.name}</b>:\n"
        if spec.courses:
            for course in spec.courses:
                text += f"  ‚Ä¢ {course.name}\n"
        else:
            text += "  (–∫—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç)\n"
        text += "\n"

    await message.answer(text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å ‚ûï'
@admin_spec_course_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å ‚ûï')
async def add_course_start(message: Message, state: FSMContext, session: AsyncSession):
    result = await session.execute(select(Specialization))
    specializations = result.scalars().all()

    if not specializations:
        await message.answer("‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=spec.name, callback_data=f"select_spec_{spec.id}")]
        for spec in specializations
    ])
    await state.set_state(CourseState.waiting_for_specialization)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫—É—Ä—Å:", reply_markup=kb)

# ‚úÖ –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
@admin_spec_course_router.callback_query(CourseState.waiting_for_specialization)
async def process_spec_choice(callback: CallbackQuery, state: FSMContext):
    if not callback.data.startswith("select_spec_"):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    spec_id = int(callback.data.replace("select_spec_", ""))
    await state.update_data(specialization_id=spec_id)

    await state.set_state(CourseState.waiting_for_course_name)
    await callback.message.edit_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:")
    await callback.answer()

# ‚úÖ –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å
@admin_spec_course_router.message(CourseState.waiting_for_course)
async def add_course_save(message: Message, state: FSMContext, session: AsyncSession):
    name = message.text.strip()
    data = await state.get_data()
    specialization_id = int(data.get("specialization_id"))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    result = await session.execute(select(Course).where(Course.name == name))
    if result.scalar():
        await message.answer("‚ùó –¢–∞–∫–æ–π –∫—É—Ä—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    new_course = Course(name=name, specialization_id=specialization_id)
    session.add(new_course)
    await session.commit()

    await message.answer(f"‚úÖ –ö—É—Ä—Å <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="HTML")
    await state.clear()