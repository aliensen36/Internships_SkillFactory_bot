import logging
from aiogram import Router, F
from aiogram.filters import StateFilter, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from app.fsm_states import *
from app.keyboards.inline import admin_specializations_menu, confirm_cancel_add_specializations, \
    confirm_cancel_edit_specializations, admin_main_menu, confirm_delete_specializations
from app.keyboards.reply import kb_specializations_courses, kb_courses, specializations_keyboard
from database.models import *

admin_specialization_router = Router()
admin_specialization_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
@admin_specialization_router.callback_query(F.data == "admin_specializations")
async def specializations(callback: CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        await callback.message.answer(
            text="<b>üèóÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await admin_specializations_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        # logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_projects_button: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


@admin_specialization_router.callback_query(F.data == "specializations:list")
async def view_specializations(callback: CallbackQuery,
                        session: AsyncSession):
    try:
        result = await session.execute(select(Specialization))
        specializations = result.scalars().all()

        if not specializations:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç")
            return

        specializations_list = "\n".join(
            f"{specialization.name}\n"
            for specialization in specializations
        )

        await callback.message.answer(
            f"<b>–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π</b>:\n\n{specializations_list}\n\n",
            reply_markup=await admin_specializations_menu(),
            parse_mode="HTML"
        )

        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        logging.error(f"Error in view_specializations: {e}")



# =====================================================================================
# ------------------------------ –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é -------------------------------
# =====================================================================================



@admin_specialization_router.callback_query(F.data == "specializations:add")
async def add_specialization_start(callback: CallbackQuery,
                                   state: FSMContext):
    await state.set_state(SpecializationAddState.waiting_for_name)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
    await callback.answer()


@admin_specialization_router.message(SpecializationAddState.waiting_for_name)
async def add_specialization_name(message: Message,
                                  state: FSMContext,
                                  session: AsyncSession):
    specialization_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    existing_specialization = await session.execute(
        select(Specialization).where(Specialization.name.ilike(specialization_name)))
    existing_specialization = existing_specialization.scalar_one_or_none()

    if existing_specialization:
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await message.answer(
            f"‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{specialization_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return

    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    data = await state.update_data(name=message.text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
    preview_message = (
        f"üìã –ù–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <b>{data['name']}</b>\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"
    )

    await message.answer(preview_message,
                         reply_markup=await confirm_cancel_add_specializations(),
                         parse_mode="HTML")
    await state.set_state(SpecializationAddState.waiting_for_confirmation)


@admin_specialization_router.callback_query(
    SpecializationAddState.waiting_for_confirmation,
    F.data == "confirm_add_specialization")
async def confirm_ass_specialization(callback: CallbackQuery,
                                     state: FSMContext,
                                     session: AsyncSession):
    data = await state.get_data()

    new_specialization = Specialization(
        name=data["name"]
    )

    session.add(new_specialization)
    await session.commit()

    await callback.message.answer("‚úÖ –ù–æ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                         reply_markup=await admin_specializations_menu())
    await callback.answer()
    await state.clear()


@admin_specialization_router.callback_query(F.data == "cancel_add_specialization")
async def cancel_add_specialization(callback: CallbackQuery,
                                    state: FSMContext):
    await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await admin_specializations_menu())
    await callback.answer()
    await state.clear()



# =====================================================================================
# -------------------------------- –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é -----------------------------
# =====================================================================================



@admin_specialization_router.callback_query(F.data == "specializations:edit")
async def edit_specialization(callback: CallbackQuery,
                              state: FSMContext,
                              session: AsyncSession):
    await state.set_state(SpecializationEditState.waiting_for_specialization_selection)
    try:
        await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        await callback.answer()

        result = await session.execute(select(Specialization))
        specializations = result.scalars().all()

        if not specializations:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for specialization in specializations:
            builder.button(
                text=f"{specialization.name}",
                callback_data=f"edit_specialization_{specialization.id}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        builder.adjust(1, repeat=True)

        await callback.message.answer(
            "<b>–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        logging.error(f"Error in view_specializations: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_specialization_router.callback_query(
    SpecializationEditState.waiting_for_specialization_selection,
    F.data.startswith("edit_specialization_"))
async def select_specialization_to_edit(callback: CallbackQuery,
                                        state: FSMContext,
                                        session: AsyncSession):
    try:
        specialization_id = int(callback.data.split("_")[-1])
        specialization = await session.get(Specialization, specialization_id)

        if not specialization:
            await callback.message.answer("‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                                          show_alert=True)
            return

        await state.update_data(
            specialization_id=specialization_id,
            current_name=specialization.name
        )

        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:  <b>{specialization.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:",
            parse_mode="HTML"
        )

        await callback.answer()
        await state.set_state(SpecializationEditState.waiting_for_name)

    except Exception as e:
        logging.error(f"Error in select_specialization_to_edit: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                              show_alert=True)
        await session.rollback()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_specialization_router.message(SpecializationEditState.waiting_for_name)
async def process_new_name(message: Message,
                           state: FSMContext):
    await state.update_data(new_name=message.text)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏:",
                         reply_markup=await confirm_cancel_edit_specializations())
    await state.set_state(SpecializationEditState.waiting_for_confirmation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
@admin_specialization_router.callback_query(
    SpecializationEditState.waiting_for_confirmation,
    F.data == "confirm_edit_specialization")
async def confirm_edit_specialization(callback: CallbackQuery,
                                      state: FSMContext,
                                      session: AsyncSession):
    data = await state.get_data()

    if 'specialization_id' not in data:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    specialization = await session.get(Specialization, data['specialization_id'])
    if not specialization:
        await callback.message.answer("‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if 'new_name' in data:
        specialization.name = data['new_name']

    await session.commit()

    await callback.message.answer(
        f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è <b>{specialization.name}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞",
        parse_mode="HTML",
        reply_markup=await admin_specializations_menu()
    )
    await callback.answer()
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
@admin_specialization_router.callback_query(F.data == "cancel_edit_specialization")
async def cancel_edit_specialization(callback: CallbackQuery,
                                     state: FSMContext,
                                     session: AsyncSession):
    await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                  reply_markup=await admin_specializations_menu())
    await callback.answer()
    await state.clear()




# =====================================================================================
# --------------------------------- –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é -----------------------------
# =====================================================================================



@admin_specialization_router.callback_query(F.data == "specializations:delete")
async def delete_specialization_start(callback: CallbackQuery,
                                      state: FSMContext,
                                      session: AsyncSession):
    try:
        result = await session.execute(select(Specialization))
        specializations = result.scalars().all()

        if not specializations:
            await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        for specialization in specializations:
            builder.button(
                text=f"{specialization.name}",
                callback_data=f"delete_specialization_{specialization.id}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        builder.adjust(1, repeat=True)

        await callback.message.answer(
            "üìÇ <b>–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
        logging.error(f"Error in view_specializations: {e}")
        await callback.answer()

    await state.set_state(SpecializationDeleteState.waiting_for_delete)


@admin_specialization_router.callback_query(
    SpecializationDeleteState.waiting_for_delete,
    F.data.startswith("delete_specialization_"))
async def select_specialization_to_delete(callback: CallbackQuery,
                                          state: FSMContext,
                                          session: AsyncSession):
    specialization_id = int(callback.data.split("_")[-1])
    specialization = await session.get(Specialization, specialization_id)

    if not specialization:
        await callback.answer("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.update_data(specialization_id=specialization_id,
                            specialization_name=specialization.name)
    await state.set_state(SpecializationDeleteState.waiting_for_confirmation)

    await callback.message.answer(
        f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é  <b>{specialization.name}</b>?",
        parse_mode="HTML",
        reply_markup=await confirm_delete_specializations()
    )
    await callback.answer()


@admin_specialization_router.callback_query(
                              SpecializationDeleteState.waiting_for_confirmation,
                              F.data == "delete_specializations:confirm")
async def confirm_delete_specialization(callback: CallbackQuery,
                                        state: FSMContext,
                                        session: AsyncSession):
    data = await state.get_data()
    specialization = await session.get(Specialization, data['specialization_id'])

    if specialization:
        await session.delete(specialization)
        await session.commit()
        await callback.message.answer(
            f"üóëÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è <b>{data['specialization_name']}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            parse_mode="HTML",
            reply_markup=await admin_specializations_menu()
        )
        await callback.answer()
    else:
        await callback.message.answer(
            "‚ö†Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞",
            reply_markup=await admin_specializations_menu()
        )
        await callback.answer()

    await state.clear()


@admin_specialization_router.callback_query(
    SpecializationDeleteState.waiting_for_confirmation,
    F.data == "delete_specializations:cancel")
async def cancel_delete_specialization(callback: CallbackQuery,
                                       state: FSMContext):
    data = await state.get_data()
    await callback.message.answer(
        f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ <b>{data.get('specialization_name', '')}</b> –æ—Ç–º–µ–Ω–µ–Ω–æ",
        parse_mode="HTML",
        reply_markup=await admin_specializations_menu()
    )
    await callback.answer()
    await state.clear()



# =====================================================================================
# ---------------------------------------- –ù–∞–∑–∞–¥ -------------------------------------
# =====================================================================================



@admin_specialization_router.callback_query(F.data == "specializations:admin_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é",
                                  reply_markup=await admin_main_menu())
    await callback.answer()
