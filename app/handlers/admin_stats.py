import io
import os
from aiofiles import open as aio_open
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm import state
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, CallbackQuery, InlineKeyboardButton, BufferedInputFile
from aiogram import F, Router, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from app.filters.chat_types import ChatTypeFilter, IsAdmin
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from sqlalchemy import select, func, distinct
from datetime import datetime, timedelta
from collections import defaultdict
import pandas as pd
from aiogram.types import BufferedInputFile

from app.keyboards.inline import admin_main_menu
from app.keyboards.reply import kb_admin_main, kb_main
from database.models import User, Specialization, Course, Broadcast, BroadcastCourseAssociation, Project

admin_stats_router = Router()
admin_stats_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())



@admin_stats_router.callback_query(F.data == 'admin_stats')
async def show_statistics_menu(callback: CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            callback_data="stats_users"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="–†–∞—Å—Å—ã–ª–∫–∏",
            callback_data="stats_mailings"
        )
    )

    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_back_to_main"
        )
    )

    await callback.message.edit_text(
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()







# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
class UserStatsState(StatesGroup):
    SORTING = State()
    SEARCH = State()



@admin_stats_router.callback_query(F.data == 'stats_users')
async def show_users_statistics(
        callback: CallbackQuery,
        session: AsyncSession,
        state: FSMContext = None,
        sort_by: str = 'users',
        search_query: str = None
):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = await session.scalar(select(func.count()).select_from(User))
    users_without_course = await session.scalar(
        select(func.count()).where(User.course_id.is_(None)))

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö
    course_stats = await get_course_stats(session, sort_by=sort_by, search_query=search_query)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = [
        "<b>üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n",
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n",
        f"–ë–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞: <b>{users_without_course}</b>\n\n",
    ]

    if search_query:
        text.append(f"<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':</b>\n\n")
    else:
        text.append(
            f"<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—É—Ä—Å–∞–º (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ {'–∏–º–µ–Ω–∏' if sort_by == 'name' else '–∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}):</b>\n")

    for course_name, user_count in course_stats:
        text.append(f"‚Ä¢ {course_name}: <b>{user_count}</b>\n")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîç –ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞",
            callback_data="stats_search_course")
    )
    builder.row(
        InlineKeyboardButton(
            text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫—É—Ä—Å–∞",
            callback_data="stats_sort_name")
    )
    builder.row(
        InlineKeyboardButton(
            text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∏—Å–ª—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
            callback_data="stats_sort_users")
    )
    builder.row(
        InlineKeyboardButton(
            text="–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel",
            callback_data="export_users_excel")
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_stats")
    )

    try:
        await callback.message.edit_text(
            "".join(text),
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
        else:
            raise

    await callback.answer()



async def get_course_stats(session: AsyncSession, sort_by: str = 'users', search_query: str = None):
    query = select(
        Course.name,
        func.count(User.id).label("user_count")
    ).join(User, Course.id == User.course_id, isouter=True)

    if search_query:
        query = query.where(Course.name.ilike(f"%{search_query}%"))

    query = query.group_by(Course.id)

    if sort_by == 'name':
        query = query.order_by(Course.name.asc())
    else:  # 'users'
        query = query.order_by(func.count(User.id).desc())

    result = await session.execute(query)
    return result.all()


@admin_stats_router.callback_query(F.data == 'stats_sort_name')
async def sort_by_name(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await show_users_statistics(
        callback=callback,
        session=session,
        state=state,
        sort_by='name'
    )
    course_stats = await get_course_stats(session, sort_by='name')

    text = [
        "<b>üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏):</b>\n\n",
        "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—É—Ä—Å–∞–º:</b>\n"
    ]

    for course_name, user_count in course_stats:
        text.append(f"‚Ä¢ {course_name}: <b>{user_count}</b>\n")

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîç –ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞",
            callback_data="stats_search_course")
    )
    builder.row(
        InlineKeyboardButton(
            text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫—É—Ä—Å–∞",
            callback_data="stats_sort_name")
    )
    builder.row(
        InlineKeyboardButton(
            text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∏—Å–ª—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
            callback_data="stats_sort_users")
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_stats")
    )

    await callback.message.edit_text(
        "".join(text),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()



@admin_stats_router.callback_query(F.data == 'stats_sort_users')
async def sort_by_users(callback: CallbackQuery,
                        session: AsyncSession,
                        state: FSMContext):
    try:
        await show_users_statistics(
            callback=callback,
            session=session,
            state=state,
            sort_by='users'
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–£–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            raise


@admin_stats_router.callback_query(F.data == 'stats_search_course')
async def search_course(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(UserStatsState.SEARCH)
    await callback.answer()


@admin_stats_router.message(StateFilter(UserStatsState.SEARCH))
async def process_search(message: Message, session: AsyncSession, state: FSMContext):
    search_query = message.text
    course_stats = await get_course_stats(session, search_query=search_query)

    if not course_stats:
        await message.answer("‚ùå –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    text = [
        f"<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':</b>\n\n",
        "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—É—Ä—Å–∞–º:</b>\n"
    ]

    for course_name, user_count in course_stats:
        text.append(f"‚Ä¢ {course_name}: <b>{user_count}</b>\n")

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
            callback_data="stats_search_course")
    )
    builder.row(
        InlineKeyboardButton(
            text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫—É—Ä—Å–∞",
            callback_data="stats_sort_name")
    )
    builder.row(
        InlineKeyboardButton(
            text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —á–∏—Å–ª—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
            callback_data="stats_sort_users")
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_stats")
    )

    await message.answer(
        "".join(text),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.clear()


@admin_stats_router.callback_query(F.data == 'export_users_excel')
async def export_users_to_excel(callback: CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–∞—Ö
    query = (
        select(
            User.first_name,
            User.last_name,
            User.username,
            Course.name.label("course_name")
        )
        .join(Course, User.course_id == Course.id, isouter=True)
        .order_by(User.id)
    )

    result = await session.execute(query)
    users_data = result.all()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
    df = pd.DataFrame(
        [(u.first_name or '', u.last_name or '', u.username or '', u.course_name or '')
         for u in users_data],
        columns=['–ò–º—è', '–§–∞–º–∏–ª–∏—è', 'Username', '–ö—É—Ä—Å']
    )

    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
        worksheet = writer.sheets['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column('A:A', 20)
        worksheet.set_column('B:B', 20)
        worksheet.set_column('C:C', 20)
        worksheet.set_column('D:D', 30)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    output.seek(0)
    excel_file = BufferedInputFile(output.read(), filename='users_report.xlsx')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await callback.message.answer_document(
        document=excel_file,
        caption="üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    )
    await callback.answer()







class ExportMailingParams(StatesGroup):
    DATE_FROM = State()
    DATE_TO = State()
    COURSE = State()
    PROJECT = State()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º
@admin_stats_router.callback_query(F.data == 'stats_mailings')
async def show_mailings_statistics(callback: CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º
    total_mailings = await session.scalar(select(func.count()).select_from(Broadcast))

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ä–∞—Å—Å—ã–ª–∫–∞—Ö
    latest_mailings_query = select(Broadcast).order_by(Broadcast.created.desc()).limit(5)
    latest_mailings = await session.scalars(latest_mailings_query)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = [
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n",
        f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: <b>{total_mailings}</b>\n\n",
        "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n"
    ]

    for mailing in latest_mailings:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        courses_query = (
            select(Course.name)
            .join(BroadcastCourseAssociation, BroadcastCourseAssociation.course_id == Course.id)
            .where(BroadcastCourseAssociation.broadcast_id == mailing.id)
        )
        courses = await session.scalars(courses_query)
        course_names = [name for name in courses]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipients_count = await session.scalar(
            select(func.count(User.id))
            .join(BroadcastCourseAssociation, User.course_id == BroadcastCourseAssociation.course_id)
            .where(BroadcastCourseAssociation.broadcast_id == mailing.id)
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ —Ç–µ–∫—Å—Ç
        date_str = mailing.created.strftime("%d.%m.%Y %H:%M") if mailing.created else "N/A"
        short_text = (mailing.text[:125] + "...") if len(mailing.text) > 125 else mailing.text

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        formatted_courses = ""
        if course_names:
            formatted_courses = "\n".join(
                f"{i + 1}) {name}"
                for i, name in enumerate(course_names)
            )
        else:
            formatted_courses = "–ù–µ—Ç –∫—É—Ä—Å–æ–≤"

        text.append(
            f"\n<b>#{mailing.id}</b>\n"
            f"<b>{date_str}</b>\n"
            f"–ö—É—Ä—Å—ã:\n<b>{formatted_courses}</b>\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{recipients_count}</b>\n"
            f"–¢–µ–∫—Å—Ç: <i>{short_text}</i>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        )

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel",
            callback_data="export_mailings")
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="admin_stats")
    )


    await callback.message.edit_text(
        "".join(text),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_stats_router.callback_query(F.data == 'export_mailings')
async def start_export_mailings(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–ü–æ –¥–∞—Ç–µ",
            callback_data="set_date_range"),
        InlineKeyboardButton(
            text="–ü–æ –∫—É—Ä—Å—É",
            callback_data="set_course")
    )
    builder.row(
        InlineKeyboardButton(
            text="–ü–æ –ø—Ä–æ–µ–∫—Ç—É",
            callback_data="set_project"),
        InlineKeyboardButton(
            text="–í—Å–µ –¥–∞–Ω–Ω—ã–µ",
            callback_data="export_all_mailings")
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="stats_mailings")
    )

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_stats_router.callback_query(F.data == 'export_all_mailings')
async def export_all_mailings(callback: CallbackQuery, session: AsyncSession):
    await generate_mailings_report(callback, session)
    await callback.answer()


async def generate_mailings_report(
    callback: CallbackQuery | Message,
    session: AsyncSession,
    date_from: datetime | None = None,
    date_to: datetime | None = None,
    course_id: int | None = None,
    project_id: int | None = None
):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        query = (
            select(
                Broadcast.created.label("date"),
                Broadcast.text.label("message"),
                Course.name.label("course"),
                Project.title.label("project"),
                func.count(User.id).label("recipients")
            )
            .join(BroadcastCourseAssociation, Broadcast.id == BroadcastCourseAssociation.broadcast_id)
            .join(Course, BroadcastCourseAssociation.course_id == Course.id)
            .join(User, User.course_id == Course.id)
            .outerjoin(Project, Broadcast.project_id == Project.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º outerjoin –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
            .group_by(Broadcast.id, Course.id, Project.id)
        )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if date_from and date_to:
            query = query.where(Broadcast.created.between(date_from, date_to))
        elif date_from:
            query = query.where(Broadcast.created >= date_from)
        elif date_to:
            query = query.where(Broadcast.created <= date_to)

        if course_id:
            query = query.where(Course.id == course_id)

        if project_id:
            query = query.where(Project.id == project_id)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await session.execute(query)
        mailings_data = result.all()

        if not mailings_data:
            error_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
            if isinstance(callback, CallbackQuery):
                await callback.message.answer(error_msg)
            else:
                await callback.answer(error_msg)
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame([{
            "–î–∞—Ç–∞": m.date.strftime("%d.%m.%Y %H:%M") if m.date else "",
            "–ü—Ä–æ–µ–∫—Ç": m.project or "–ù–µ —É–∫–∞–∑–∞–Ω",
            "–ö—É—Ä—Å": m.course,
            "–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π": m.recipients,
            "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏": m.message
        } for m in mailings_data])

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–†–∞—Å—Å—ã–ª–∫–∏')
            worksheet = writer.sheets['–†–∞—Å—Å—ã–ª–∫–∏']

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet.set_column('A:A', 20)  # –î–∞—Ç–∞
            worksheet.set_column('B:B', 25)  # –ü—Ä–æ–µ–∫—Ç
            worksheet.set_column('C:C', 25)  # –ö—É—Ä—Å
            worksheet.set_column('D:D', 15)  # –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            worksheet.set_column('E:E', 50)  # –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        output.seek(0)
        excel_file = BufferedInputFile(output.read(), filename='mailings_report.xlsx')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if isinstance(callback, CallbackQuery):
            await callback.message.answer_document(
                document=excel_file,
                caption="üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º"
            )
        else:
            await callback.answer_document(
                document=excel_file,
                caption="üìä –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º"
            )

    except Exception as e:
        await callback.answer()


@admin_stats_router.callback_query(F.data == 'set_date_range')
async def set_date_range(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(ExportMailingParams.DATE_FROM)
    await callback.answer()


@admin_stats_router.message(ExportMailingParams.DATE_FROM)
async def process_date_from(message: Message, state: FSMContext):
    try:
        date_from = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(date_from=date_from)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã):")
        await state.set_state(ExportMailingParams.DATE_TO)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@admin_stats_router.message(ExportMailingParams.DATE_TO)
async def process_date_to(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    date_from = data.get('date_from')

    if message.text.lower() != '–Ω–µ—Ç':
        try:
            date_to = datetime.strptime(message.text, "%d.%m.%Y")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return
    else:
        date_to = None

    await state.clear()
    await generate_mailings_report(
        callback=message,
        session=session,
        date_from=date_from,
        date_to=date_to
    )


@admin_stats_router.callback_query(F.data == 'set_course')
async def set_course(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
    courses = await session.execute(select(Course.id, Course.name).order_by(Course.name))

    builder = InlineKeyboardBuilder()
    for course in courses:
        builder.row(
            InlineKeyboardButton(
                text=course.name,
                callback_data=f"select_course_{course.id}"
            )
        )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="export_mailings"
        )
    )

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_stats_router.callback_query(F.data.startswith('select_course_'))
async def process_course_selection(callback: CallbackQuery, session: AsyncSession):
    course_id = int(callback.data.split('_')[-1])
    await generate_mailings_report(
        callback=callback,
        session=session,
        course_id=course_id
    )
    await callback.answer()


@admin_stats_router.callback_query(F.data == 'set_project')
async def set_project(callback: CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    projects = await session.execute(select(Project.id, Project.title).order_by(Project.title))

    builder = InlineKeyboardBuilder()
    for project in projects:
        builder.row(
            InlineKeyboardButton(
                text=project.title,
                callback_data=f"select_project_{project.id}"
            )
        )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="export_mailings"
        )
    )

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@admin_stats_router.callback_query(F.data.startswith('select_project_'))
async def process_project_selection(callback: CallbackQuery, session: AsyncSession):
    project_id = int(callback.data.split('_')[-1])
    await generate_mailings_report(
        callback=callback,
        session=session,
        project_id=project_id
    )
    await callback.answer()



@admin_stats_router.callback_query(F.data == 'admin_back_to_main')
async def back_to_admin_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏:",
        reply_markup=await admin_main_menu()
    )
    await callback.answer()
