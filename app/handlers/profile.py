from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from app.constants import COURSE_TITLES
from app.keyboards.inline import kb_change_specialization, change_courses_keyboard
from app.keyboards.reply import kb_profile, kb_main
from database.models import *

profile_router = Router()

@profile_router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message, session: AsyncSession):
    stmt = select(User).where(User.tg_id == message.from_user.id).options(
        selectinload(User.specialization),
        selectinload(User.course)
    )
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        specialization = user.specialization.name if user.specialization else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        course = user.course.name if user.course else "–Ω–µ –≤—ã–±—Ä–∞–Ω"
        await message.answer(
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üî∏ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{specialization}</b>\n"
            f"üîπ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å: <b>{course}</b>",
            parse_mode="HTML",
            reply_markup=kb_profile
        )
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start.")


@profile_router.message(F.text == "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å")
async def change_course_start(message: Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    result = await session.execute(select(Specialization))
    specializations = result.scalars().all()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=spec.name, callback_data=f"select_spec_{spec.id}")]
            for spec in specializations
        ]
    )

    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:", reply_markup=keyboard)

@profile_router.callback_query(F.data.startswith("select_spec_"))
async def choose_course_after_spec(callback: CallbackQuery, session: AsyncSession):
    spec_id = int(callback.data.replace("select_spec_", ""))

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    spec_result = await session.execute(select(Specialization).filter(Specialization.id == spec_id))
    specialization = spec_result.scalars().first()

    if not specialization:
        await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    courses_result = await session.execute(
        select(Course).filter(Course.specialization_id == spec_id)
    )
    courses = courses_result.scalars().all()

    if not courses:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=course.name, callback_data=f"select_course_{course.id}_{spec_id}")]
            for course in courses
        ]
    )

    await callback.message.edit_text(f"üéì –í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: <b>{specialization.name}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", parse_mode="HTML", reply_markup=keyboard)

@profile_router.callback_query(F.data.startswith("select_course_"))
async def set_course_and_spec(callback: CallbackQuery, session: AsyncSession):
    data = callback.data.replace("select_course_", "")
    course_id_str, spec_id_str = data.split("_")
    course_id = int(course_id_str)
    spec_id = int(spec_id_str)

    user_id = callback.from_user.id

    async with session.begin():
        result = await session.execute(select(User).filter(User.tg_id == user_id))
        user = result.scalars().first()

        course_result = await session.execute(select(Course).filter(Course.id == course_id))
        course = course_result.scalars().first()

        spec_result = await session.execute(select(Specialization).filter(Specialization.id == spec_id))
        spec = spec_result.scalars().first()

        if user and course and spec:
            user.specialization_id = spec.id
            user.course_id = course.id
            await session.commit()

            await callback.message.edit_text(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{spec.name}</b>\n‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –∫—É—Ä—Å: <b>{course.name}</b>",
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@profile_router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb_main)
