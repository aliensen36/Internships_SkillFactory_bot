from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from app.fsm_states import ChangeCourseState
from app.keyboards.inline import *
from app.keyboards.reply import kb_main
from database.models import *
from aiogram.exceptions import TelegramBadRequest


profile_router = Router()


@profile_router.message(F.text == "–ú–æ–π –∫—É—Ä—Å")
async def profile_handler(message: Message, session: AsyncSession):
    stmt = select(User).where(User.tg_id == message.from_user.id).options(
        selectinload(User.specialization),
        selectinload(User.course)
    )
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        specialization = user.specialization.name if user.specialization else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        course = user.course.name if user.course else "–Ω–µ –≤—ã–±—Ä–∞–Ω"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        if user.course_id:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω
            builder.row(
                InlineKeyboardButton(
                    text="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –º–æ–µ–º—É –∫—É—Ä—Å—É",
                    callback_data=f"view_course_events_{user.course_id}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å" –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        builder.row(
            InlineKeyboardButton(
                text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å",
                callback_data="change_course_from_profile"
            )
        )

        await message.answer(
            f"üî∏ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:\n<b>{specialization}</b>\n\n"
            f"üîπ –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å:\n<b>{course}</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start.")


@profile_router.callback_query(F.data == "change_course_from_profile")
async def change_specialization_start(callback: CallbackQuery,
                                      state: FSMContext,
                                      session: AsyncSession):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    stmt = select(User).where(User.tg_id == callback.from_user.id).options(
        selectinload(User.specialization),
        selectinload(User.course)
    )
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ state
        await state.update_data(
            old_spec_id = user.specialization_id,
            old_course_id = user.course_id
        )

    await callback.message.answer("üéØ –í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
                         reply_markup=await change_specialization_keyboard(session))
    await callback.answer()
    await state.set_state(ChangeCourseState.waiting_for_specialization)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /course
# @profile_router.message(Command("course"))
# async def course_command(message: Message, state: FSMContext, session: AsyncSession):
#     # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
#     await change_specialization_start(message, state, session)


@profile_router.callback_query(ChangeCourseState.waiting_for_specialization,
                               F.data.startswith("change_spec_"))
async def change_specialization(callback: CallbackQuery,
                                state: FSMContext,
                                session: AsyncSession):
    spec_id = callback.data.replace("change_spec_", "").strip()
    if not spec_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ state, –Ω–æ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.update_data(new_spec_id=int(spec_id))

    stmt = select(Specialization).where(Specialization.id == int(spec_id))
    spec_result = await session.execute(stmt)
    specialization = spec_result.scalar_one_or_none()

    if specialization:
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:\n\n<b>{specialization.name}</b>",
            parse_mode="HTML"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å—ã –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        keyboard = await change_courses_keyboard(session, int(spec_id), 0)

        if keyboard is None:
            await callback.message.answer(
                "‚ùå –ö—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
                reply_markup=await specialization_keyboard(session)
            )
        else:
            await callback.message.answer(
                "üéì –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                reply_markup=keyboard
            )
            await state.set_state(ChangeCourseState.waiting_for_course)
    else:
        await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)


@profile_router.callback_query(ChangeCourseState.waiting_for_course,
                               F.data.startswith("change_course_"))
async def change_course(callback: CallbackQuery, state: FSMContext,
                        session: AsyncSession):
    course_id = callback.data.replace("change_course_", "")

    if not course_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫—É—Ä—Å–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    state_data = await state.get_data()
    new_spec_id = state_data.get('new_spec_id')

    stmt = select(User).where(User.tg_id == callback.from_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∏ –∫—É—Ä—Å
        user.specialization_id = new_spec_id
        user.course_id = int(course_id)
        await session.commit()

        stmt = select(Course).where(Course.id == int(course_id))
        result = await session.execute(stmt)
        course = result.scalar_one_or_none()

        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å:\n\n<b>{course.name}</b>",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb_main
        )

    else:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    await state.clear()


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞
@profile_router.callback_query(F.data.startswith("changepage_"))
async def paginate_courses(callback: CallbackQuery, session: AsyncSession):
    _, specialization_id, page = callback.data.split("_")

    if not specialization_id.isdigit() or not page.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    specialization_id, page = int(specialization_id), int(page)

    keyboard = await change_courses_keyboard(session, specialization_id, page)

    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except TelegramBadRequest:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å


# –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫—É—Ä—Å–∞
@profile_router.callback_query(F.data.startswith("view_course_events_"))
async def show_course_broadcasts(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    try:
        course_id = int(callback.data.split("_")[-1])

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        course = await session.get(Course, course_id)
        if not course:
            await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫—É—Ä—Å–∞
        stmt = (
            select(Broadcast)
            .join(Broadcast.course_associations)
            .where(
                Broadcast.is_sent == True,
                Broadcast.is_active == True,
                BroadcastCourseAssociation.course_id == course_id
            )
            .order_by(Broadcast.id.desc())
        )
        broadcasts_list = (await session.scalars(stmt)).all()

        if not broadcasts_list:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        new_messages = await send_broadcast_with_pagination(
            callback=callback,
            broadcasts=broadcasts_list,
            index=0,
            course_id=course_id,
            total=len(broadcasts_list),
            last_messages=[]  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            last_messages=new_messages,
            current_index=0,
            broadcasts_list=broadcasts_list,
            course_id=course_id
        )

    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def send_broadcast_with_pagination(
        callback: CallbackQuery,
        broadcasts: list[Broadcast],
        index: int,
        course_id: int,
        total: int,
        last_messages: list[int] = None
):
    """–§—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    try:
        if index < 0 or index >= len(broadcasts):
            await callback.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏ —Ñ–æ—Ç–æ, –∏ —Ç–µ–∫—Å—Ç)
        if last_messages:
            for msg_id in last_messages:
                try:
                    await callback.message.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except Exception as e:
                    await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

        broadcast = broadcasts[index]
        pagination_text = f"<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {index + 1} –∏–∑ {total}</b>"
        main_text = broadcast.text
        full_text = f"{main_text}\n\n{pagination_text}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        if index > 0:
            builder.button(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"prev_course_broadcast_{course_id}_{index}"
            )
        if index < total - 1:
            builder.button(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data=f"next_course_broadcast_{course_id}_{index}"
            )

        builder.adjust(2)
        markup = builder.as_markup()

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        current_messages = []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if broadcast.image_path:
            try:
                photo = FSInputFile(broadcast.image_path) if os.path.exists(
                    broadcast.image_path) else broadcast.image_path

                if len(full_text) <= 1024:
                    msg = await callback.message.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=photo,
                        caption=full_text,
                        reply_markup=markup,
                        parse_mode="HTML"
                    )
                    current_messages.append(msg.message_id)
                else:
                    photo_msg = await callback.message.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=photo
                    )
                    current_messages.append(photo_msg.message_id)

                    text_msg = await callback.message.bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=full_text,
                        reply_markup=markup,
                        disable_web_page_preview=True,
                        parse_mode="HTML"
                    )
                    current_messages.append(text_msg.message_id)
            except Exception as e:
                error_msg = await callback.message.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n{full_text}",
                    reply_markup=markup,
                    disable_web_page_preview=True,
                    parse_mode="HTML"
                )
                current_messages.append(error_msg.message_id)
        else:
            msg = await callback.message.bot.send_message(
                chat_id=callback.message.chat.id,
                text=full_text,
                reply_markup=markup,
                disable_web_page_preview=True,
                parse_mode="HTML"
            )
            current_messages.append(msg.message_id)

        return current_messages

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return []
    finally:
        await callback.answer()


@profile_router.callback_query(F.data.startswith("prev_course_broadcast_"))
async def prev_course_broadcast(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    try:
        data = await state.get_data()
        last_messages = data.get("last_messages", [])
        current_index = data.get("current_index", 0)
        broadcasts_list = data.get("broadcasts_list", [])
        course_id = data.get("course_id")

        if not broadcasts_list:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫", show_alert=True)
            return

        new_index = max(0, current_index - 1)

        new_messages = await send_broadcast_with_pagination(
            callback=callback,
            broadcasts=broadcasts_list,
            index=new_index,
            course_id=course_id,
            total=len(broadcasts_list),
            last_messages=last_messages
        )

        await state.update_data(
            last_messages=new_messages,
            current_index=new_index
        )

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)


@profile_router.callback_query(F.data.startswith("next_course_broadcast_"))
async def next_course_broadcast(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    try:
        data = await state.get_data()
        last_messages = data.get("last_messages", [])
        current_index = data.get("current_index", 0)
        broadcasts_list = data.get("broadcasts_list", [])
        course_id = data.get("course_id")

        if not broadcasts_list:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫", show_alert=True)
            return

        new_index = min(len(broadcasts_list) - 1, current_index + 1)

        new_messages = await send_broadcast_with_pagination(
            callback=callback,
            broadcasts=broadcasts_list,
            index=new_index,
            course_id=course_id,
            total=len(broadcasts_list),
            last_messages=last_messages
        )

        await state.update_data(
            last_messages=new_messages,
            current_index=new_index
        )

    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)
