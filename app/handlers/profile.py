from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from app.fsm_states import ChangeCourseState
from app.keyboards.inline import *
from app.keyboards.reply import kb_profile, kb_main
from database.models import *
from aiogram.exceptions import TelegramBadRequest


profile_router = Router()


@profile_router.message(F.text == "–ú–æ–π –∫—É—Ä—Å")
async def profile_handler(message: Message, session: AsyncSession):
    stmt = select(User).where(User.tg_id == message.from_user.id).options(
        selectinload(User.specialization),
        selectinload(User.course)
    )
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        specialization = user.specialization.name if user.specialization else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        course = user.course.name if user.course else "–Ω–µ –≤—ã–±—Ä–∞–Ω"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()

        if user.course_id:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω
            builder.row(
                InlineKeyboardButton(
                    text="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –º–æ–µ–º—É –∫—É—Ä—Å—É",
                    callback_data=f"view_course_events_{user.course_id}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å" –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        builder.row(
            InlineKeyboardButton(
                text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å",
                callback_data="change_course_from_profile"
            )
        )

        await message.answer(
            f"üî∏ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:\n<b>{specialization}</b>\n\n"
            f"üîπ –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å:\n<b>{course}</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start.")


@profile_router.callback_query(F.data == "change_course_from_profile")
async def change_specialization_start(callback: CallbackQuery,
                                      state: FSMContext,
                                      session: AsyncSession):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
    stmt = select(User).where(User.tg_id == callback.from_user.id).options(
        selectinload(User.specialization),
        selectinload(User.course)
    )
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ state
        await state.update_data(
            old_spec_id = user.specialization_id,
            old_course_id = user.course_id
        )

    await callback.message.answer("üéØ –í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
                         reply_markup=await change_specialization_keyboard(session))
    await callback.answer()
    await state.set_state(ChangeCourseState.waiting_for_specialization)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /course
# @profile_router.message(Command("course"))
# async def course_command(message: Message, state: FSMContext, session: AsyncSession):
#     # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
#     await change_specialization_start(message, state, session)


@profile_router.callback_query(ChangeCourseState.waiting_for_specialization,
                               F.data.startswith("change_spec_"))
async def change_specialization(callback: CallbackQuery,
                                state: FSMContext,
                                session: AsyncSession):
    spec_id = callback.data.replace("change_spec_", "").strip()
    if not spec_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ state, –Ω–æ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.update_data(new_spec_id=int(spec_id))

    stmt = select(Specialization).where(Specialization.id == int(spec_id))
    spec_result = await session.execute(stmt)
    specialization = spec_result.scalar_one_or_none()

    if specialization:
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:\n\n<b>{specialization.name}</b>",
            parse_mode="HTML"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å—ã –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        keyboard = await change_courses_keyboard(session, int(spec_id), 0)

        if keyboard is None:
            await callback.message.answer(
                "‚ùå –ö—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
                reply_markup=await specialization_keyboard(session)
            )
        else:
            await callback.message.answer(
                "üéì –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                reply_markup=keyboard
            )
            await state.set_state(ChangeCourseState.waiting_for_course)
    else:
        await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)


@profile_router.callback_query(ChangeCourseState.waiting_for_course,
                               F.data.startswith("change_course_"))
async def change_course(callback: CallbackQuery, state: FSMContext,
                        session: AsyncSession):
    course_id = callback.data.replace("change_course_", "")

    if not course_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫—É—Ä—Å–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    state_data = await state.get_data()
    new_spec_id = state_data.get('new_spec_id')

    stmt = select(User).where(User.tg_id == callback.from_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –∏ –∫—É—Ä—Å
        user.specialization_id = new_spec_id
        user.course_id = int(course_id)
        await session.commit()

        stmt = select(Course).where(Course.id == int(course_id))
        result = await session.execute(stmt)
        course = result.scalar_one_or_none()

        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å:\n\n<b>{course.name}</b>",
            parse_mode="HTML"
        )
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb_main
        )

    else:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    await state.clear()


# @profile_router.message(F.text == "–ù–∞–∑–∞–¥")
# async def back_to_main_menu(message: Message, state: FSMContext, session: AsyncSession):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
#     current_state = await state.get_state()
#     if current_state == ChangeCourseState.waiting_for_course:
#         # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
#         state_data = await state.get_data()
#         old_spec_id = state_data.get('old_spec_id')
#         old_course_id = state_data.get('old_course_id')
#
#         stmt = select(User).where(User.tg_id == message.from_user.id)
#         result = await session.execute(stmt)
#         user = result.scalar_one_or_none()
#
#         if user:
#             # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
#             user.specialization_id = old_spec_id
#             user.course_id = old_course_id
#             await session.commit()
#
#     await state.clear()
#     await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_main)


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞
@profile_router.callback_query(F.data.startswith("changepage_"))
async def paginate_courses(callback: CallbackQuery, session: AsyncSession):
    _, specialization_id, page = callback.data.split("_")

    if not specialization_id.isdigit() or not page.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    specialization_id, page = int(specialization_id), int(page)

    keyboard = await change_courses_keyboard(session, specialization_id, page)

    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except TelegramBadRequest:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å


# –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫—É—Ä—Å–∞
@profile_router.callback_query(F.data.startswith("view_course_events_"))
async def view_course_events(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        course_id = int(callback.data.split("_")[-1])

        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            course = await session.get(Course, course_id)
            if not course:
                await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
            stmt = (
                select(Broadcast)
                .join(Broadcast.course_associations)
                .options(selectinload(Broadcast.project))
                .where(
                    Broadcast.is_sent == True,
                    Broadcast.is_active == True,
                    BroadcastCourseAssociation.course_id == course_id
                )
                .order_by(Broadcast.created.desc())
            )

            broadcasts = (await session.scalars(stmt)).all()

            if not broadcasts:
                await callback.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞", show_alert=True)
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
            builder = InlineKeyboardBuilder()

            for broadcast in broadcasts:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞)
                if broadcast.text:
                    text_preview = broadcast.text[:40].strip()
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω
                    if len(broadcast.text) > 40:
                        text_preview += "..."
                else:
                    text_preview = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

                builder.row(
                    InlineKeyboardButton(
                        text=text_preview,
                        callback_data=f"view_broadcast_{broadcast.id}"
                    )
                )

            await callback.message.edit_text(
                f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –∫—É—Ä—Å—É <b>{course.name}</b>:",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )

    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫—É—Ä—Å–∞", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ view_course_events: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", show_alert=True)


@profile_router.callback_query(F.data.startswith("view_broadcast_"))
async def show_broadcast_details(callback: CallbackQuery, session: AsyncSession):
    try:
        broadcast_id = int(callback.data.split("_")[-1])

        async with session.begin():
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            broadcast = await session.get(
                Broadcast,
                broadcast_id,
                options=[
                    selectinload(Broadcast.project),
                    selectinload(Broadcast.course_associations)
                ]
            )

            if not broadcast:
                await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            course_id = broadcast.course_associations[0].course_id if broadcast.course_associations else None

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç)
            if broadcast.project:
                message_text.append(f"<b>–ü—Ä–æ–µ–∫—Ç: {broadcast.project.title}</b>\n\n")

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            message_text.append(f"–î–∞—Ç–∞: {broadcast.created.strftime('%d.%m.%Y %H:%M')}\n\n")

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            message_text.append(broadcast.text if broadcast.text else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            builder = InlineKeyboardBuilder()

            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
            if course_id:
                builder.row(
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                        callback_data=f"view_course_events_{course_id}"
                    )
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text="".join(message_text),
                parse_mode="HTML",
                reply_markup=builder.as_markup(),
                disable_web_page_preview=True
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_broadcast_details: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)


@profile_router.callback_query(F.data.startswith("view_course_events_"))
async def back_to_broadcasts_list(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        course_id = int(callback.data.split("_")[-1])

        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            course = await session.get(Course, course_id)
            if not course:
                await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
            stmt = (
                select(Broadcast)
                .join(Broadcast.course_associations)
                .options(selectinload(Broadcast.project))
                .where(
                    Broadcast.is_sent == True,
                    Broadcast.is_active == True,
                    BroadcastCourseAssociation.course_id == course_id
                )
                .order_by(Broadcast.created.desc())
            )

            broadcasts = (await session.scalars(stmt)).all()

            if not broadcasts:
                await callback.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", show_alert=True)
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
            builder = InlineKeyboardBuilder()
            for broadcast in broadcasts:
                text_preview = broadcast.text[:40].strip() + "..." if broadcast.text and len(
                    broadcast.text) > 40 else broadcast.text or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                builder.row(
                    InlineKeyboardButton(
                        text=text_preview,
                        callback_data=f"view_broadcast_{broadcast.id}"
                    )
                )

            await callback.message.edit_text(
                f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –∫—É—Ä—Å—É <b>{course.name}</b>:",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ back_to_broadcasts_list: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", show_alert=True)
