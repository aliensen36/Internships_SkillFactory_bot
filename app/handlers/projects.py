import logging
from pathlib import Path

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload

from app.keyboards.inline import projects_keyboard, view_projects_keyboard
from database.models import User, Broadcast, BroadcastCourseAssociation, Project

projects_router = Router()

logger = logging.getLogger(__name__)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚≠ê –ü—Ä–æ–µ–∫—Ç—ã"
@projects_router.message(F.text == "‚≠ê –ü—Ä–æ–µ–∫—Ç—ã")
async def handle_projects_button(message: Message, session: AsyncSession):
    try:
        keyboard = await view_projects_keyboard(session)
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç</b>",
            reply_markup=keyboard.as_markup(
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤. "
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@projects_router.callback_query(F.data.startswith("view_project_"))
async def view_projects(callback: CallbackQuery, session: AsyncSession):
    try:
        project_id = int(callback.data.split("_")[2])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º
        user = await session.execute(
            select(User)
            .options(joinedload(User.course))
            .where(User.tg_id == callback.from_user.id)
        )
        user = user.scalar_one_or_none()

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if not user.course_id:
            await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project = await session.get(Project, project_id)
        if not project:
            await callback.answer("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫—É—Ä—Å–∞
        broadcasts = await session.execute(
            select(Broadcast)
            .join(BroadcastCourseAssociation, Broadcast.id == BroadcastCourseAssociation.broadcast_id)
            .where(
                Broadcast.project_id == project_id,
                BroadcastCourseAssociation.course_id == user.course_id
            )
            .order_by(Broadcast.created.asc())
        )
        broadcasts = broadcasts.scalars().all()

        if not broadcasts:
            await callback.answer("‚ÑπÔ∏è –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        for idx, broadcast in enumerate(broadcasts, 1):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"{idx}. {broadcast.text}"

            try:
                if broadcast.image_path:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    image_path = Path(broadcast.image_path)
                    if image_path.exists():
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏
                        await callback.message.answer_photo(
                            photo=InputFile(image_path),
                            caption=message,
                            parse_mode="HTML"
                        )
                    else:
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
                        await callback.message.answer(
                            f"üñºÔ∏è [–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {broadcast.image_path}]\n{message}",
                            parse_mode="HTML"
                        )
                        logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {broadcast.image_path}")
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await callback.message.answer(
                        message,
                        parse_mode="HTML"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {idx}: {e}")
                await callback.message.answer(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {idx}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="HTML"
                )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_projects: {e}", exc_info=True)
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@projects_router.callback_query(F.data.startswith("broadcast_"))
async def show_broadcast_details(
        callback: CallbackQuery,
        session: AsyncSession
):
    try:
        broadcast_id = int(callback.data.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –ø—Ä–æ–µ–∫—Ç–æ–º
        broadcast = await session.execute(
            select(Broadcast)
            .options(joinedload(Broadcast.project))
            .where(Broadcast.id == broadcast_id)
        )
        broadcast = broadcast.scalar_one_or_none()

        if not broadcast:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_parts = []

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
        if broadcast.project:
            message_parts.append(f"üìå –ü—Ä–æ–µ–∫—Ç: <b>{broadcast.project.title}</b>")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        message_parts.extend([
            "",
            "üìÑ <b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",
            broadcast.text
        ])

        message_text = "\n".join(message_parts)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if getattr(broadcast, 'image_path', None):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                caption = message_text if len(message_text) <= 1024 else message_text[:1000] + "..."
                await callback.message.answer_photo(
                    photo=broadcast.image_path,
                    caption=caption,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await callback.message.answer(
                    "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n" + message_text,
                    parse_mode="HTML"
                )
        else:
            await callback.message.answer(
                message_text,
                parse_mode="HTML"
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_broadcast_details: {str(e)}", exc_info=True)
        await callback.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
            show_alert=True
        )
