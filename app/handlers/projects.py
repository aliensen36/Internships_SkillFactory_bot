import logging
from pathlib import Path
from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload, selectinload
from app.handlers.admin_broadcast import send_photo_with_caption
from app.keyboards.inline import projects_keyboard, view_projects_keyboard, ProjectCallbackFilter, \
    project_details_message, get_project_details_keyboard, view_project_kb
from database.models import User, Broadcast, BroadcastCourseAssociation, Project, Course

projects_router = Router()

logger = logging.getLogger(__name__)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚≠ê –ü—Ä–æ–µ–∫—Ç—ã"
@projects_router.message(F.text == "‚≠ê –ü—Ä–æ–µ–∫—Ç—ã")
async def projects_button(message: Message, session: AsyncSession):
    try:
        keyboard = await view_projects_keyboard(session)
        await message.answer(
            "üìÇ <b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç</b>",
            reply_markup=keyboard.as_markup(
                resize_keyboard=True,
                one_time_keyboard=False
            ),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤. "
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
@projects_router.callback_query(F.data == "back_to_projects_list")
async def back_to_projects_list(callback: CallbackQuery, session: AsyncSession):
    keyboard = await view_projects_keyboard(session)
    await callback.message.edit_text(
        "üìÇ <b>–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç</b>",
        reply_markup=keyboard.as_markup(
            resize_keyboard=True,
            one_time_keyboard=False),
        parse_mode="HTML")
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
@projects_router.callback_query(ProjectCallbackFilter(prefix="view_project_"))
async def view_project(callback: CallbackQuery, session: AsyncSession):
    project_id = int(callback.data.split("_")[-1])
    project = await session.get(Project, project_id)

    if not project:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    message_text = await project_details_message(project)

    await callback.message.edit_text(
        message_text,
        reply_markup=await get_project_details_keyboard(project_id, session),
        parse_mode="HTML"
    )
    await callback.answer()


@projects_router.callback_query(ProjectCallbackFilter(prefix="about_project_"))
async def about_project(callback: CallbackQuery, session: AsyncSession,
                        state: FSMContext):
    try:
        project_id = int(callback.data.split("_")[-1])
        project = await session.get(Project, project_id)

        if not project:
            await callback.answer("üö® –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        about_text = (
            f"{project.description}"
        )

        await callback.message.edit_text(
            about_text,
            reply_markup=await get_project_details_keyboard(project_id, session),
            parse_mode="HTML"
            )
        await callback.answer()
        await state.update_data(current_project_id=project_id)

    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID –ø—Ä–æ–µ–∫—Ç–∞", show_alert=True)
    except Exception as e:
        await callback.answer()


@projects_router.callback_query(ProjectCallbackFilter(prefix="benefits_project_"))
async def benefits_project(callback: CallbackQuery, session: AsyncSession,
                        state: FSMContext):
    try:
        project_id = int(callback.data.split("_")[-1])
        project = await session.get(Project, project_id)

        if not project:
            await callback.answer("üö® –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        about_text = (
            f"{project.benefit}"
        )

        await callback.message.edit_text(
            about_text,
            reply_markup=await get_project_details_keyboard(project_id, session),
            parse_mode="HTML"
            )
        await callback.answer()
        await state.update_data(current_project_id=project_id)

    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID –ø—Ä–æ–µ–∫—Ç–∞", show_alert=True)
    except Exception as e:
        await callback.answer()


@projects_router.callback_query(ProjectCallbackFilter(prefix="examples_project_"))
async def examples_project(callback: CallbackQuery,
                           session: AsyncSession,
                           state: FSMContext):
    try:
        project_id = int(callback.data.split("_")[-1])
        project = await session.get(Project, project_id)

        if not project:
            await callback.answer("üö® –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã
        examples_text = project.example if project.example else "üì≠ –ü—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ—Ç"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        about_text = f"{examples_text}"

        await callback.message.edit_text(
            about_text,
            reply_markup=await get_project_details_keyboard(project_id, session),
            parse_mode="HTML"
            )
        await callback.answer()
        await state.update_data(current_project_id=project_id)


    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID –ø—Ä–æ–µ–∫—Ç–∞", show_alert=True)
    except Exception as e:
        await callback.answer()



# =====================================================================================
#------------------------------ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ –º–æ–µ–º—É –∫—É—Ä—Å—É-------------------------------
# =====================================================================================



@projects_router.callback_query(ProjectCallbackFilter(prefix="available_to_me_project_"))
async def show_available_broadcasts(callback: CallbackQuery,
                                    session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –∫—É—Ä—Å–æ–º
        stmt = select(User).where(User.tg_id == callback.from_user.id).options(
            selectinload(User.course)
        )
        user = (await session.execute(stmt)).scalar_one_or_none()

        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        project_id = int(callback.data.split("_")[-1])
        project = await session.get(Project, project_id)

        if not project:
            await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if not user.course_id:
            await callback.answer("–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –∫—É—Ä—Å", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = (
            select(Broadcast)
            .join(Broadcast.course_associations)
            .where(
                Broadcast.project_id == project_id,
                Broadcast.is_sent == True,
                BroadcastCourseAssociation.course_id == user.course_id
            )
            .order_by(Broadcast.id.desc())
        )
        broadcasts_list = (await session.scalars(stmt)).all()

        if not broadcasts_list:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞", show_alert=True)
            return

        await send_broadcast_with_pagination(
            callback=callback,
            broadcasts=broadcasts_list,
            index=0,
            project_id=project_id,
            total=len(broadcasts_list),
            user_course_id=user.course_id
        )

    except Exception as e:
        logger.error(f"Error in show_available_broadcasts: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)



async def send_broadcast_with_pagination(
    callback: CallbackQuery,
    broadcasts: list[Broadcast],
    index: int,
    project_id: int,
    total: int,
    user_course_id: int
):
    """–§—É–Ω–∫—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞"""
    try:
        if index < 0 or index >= len(broadcasts):
            await callback.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
            return

        broadcast = broadcasts[index]
        pagination_text = f"üìå –†–∞—Å—Å—ã–ª–∫–∞ {index + 1} –∏–∑ {total}"
        main_text = broadcast.text
        full_text = f"{main_text}\n\n{pagination_text}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        if index > 0:
            builder.button(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                callback_data=f"prev_broadcast_{project_id}_{index}_{user_course_id}"
            )
        if index < total - 1:
            builder.button(
                text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                callback_data=f"next_broadcast_{project_id}_{index}_{user_course_id}"
            )
        builder.button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É",
            callback_data=f"view_project_{project_id}"
        )
        builder.adjust(2, 1)
        markup = builder.as_markup()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # try:
        #     await callback.message.delete()
        # except Exception as e:
        #     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if broadcast.image_path:
            try:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π (<=1024 —Å–∏–º–≤–æ–ª–∞) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                if len(full_text) <= 1024:
                    await callback.message.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=broadcast.image_path,
                        caption=full_text,
                        reply_markup=markup
                    )
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                    await callback.message.bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=broadcast.image_path,
                        reply_markup=markup
                    )
                    await callback.message.bot.send_message(
                        chat_id=callback.message.chat.id,
                        text=full_text,
                        reply_markup=None  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                await callback.message.answer(
                    text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n{full_text}",
                    reply_markup=markup
                )
        else:
            await callback.message.answer(
                text=full_text,
                reply_markup=markup
            )

    except Exception as e:
        logger.error(f"Error in send_broadcast_with_pagination: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
    finally:
        await callback.answer()



@projects_router.callback_query(F.data.startswith("prev_broadcast_"))
async def prev_broadcast(callback: CallbackQuery, session: AsyncSession):
    try:
        parts = callback.data.split('_')
        project_id = int(parts[2])
        index = int(parts[3])
        course_id = int(parts[4])

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫—É—Ä—Å–∞
        stmt = (
            select(Broadcast)
            .join(Broadcast.course_associations)
            .where(
                Broadcast.project_id == project_id,
                Broadcast.is_sent == True,
                BroadcastCourseAssociation.course_id == course_id
            )
            .order_by(Broadcast.id.desc())
        )
        broadcasts_list = (await session.scalars(stmt)).all()

        if not broadcasts_list:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        await send_broadcast_with_pagination(
            callback=callback,
            broadcasts=broadcasts_list,
            index=max(0, index - 1),
            project_id=project_id,
            total=len(broadcasts_list),
            user_course_id=course_id
        )

    except Exception as e:
        logger.error(f"Error in prev_broadcast: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)

@projects_router.callback_query(F.data.startswith("next_broadcast_"))
async def next_broadcast(callback: CallbackQuery, session: AsyncSession):
    try:
        parts = callback.data.split('_')
        project_id = int(parts[2])
        index = int(parts[3])
        course_id = int(parts[4])

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫—É—Ä—Å–∞
        stmt = (
            select(Broadcast)
            .join(Broadcast.course_associations)
            .where(
                Broadcast.project_id == project_id,
                Broadcast.is_sent == True,
                BroadcastCourseAssociation.course_id == course_id
            )
            .order_by(Broadcast.id.desc())
        )
        broadcasts_list = (await session.scalars(stmt)).all()

        if not broadcasts_list:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        await send_broadcast_with_pagination(
            callback=callback,
            broadcasts=broadcasts_list,
            index=min(len(broadcasts_list) - 1, index + 1),
            project_id=project_id,
            total=len(broadcasts_list),
            user_course_id=course_id
        )

    except Exception as e:
        logger.error(f"Error in next_broadcast: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", show_alert=True)