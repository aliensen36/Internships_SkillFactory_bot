from aiogram.filters import CommandStart, StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from sqlalchemy.ext.asyncio import AsyncSession
import app.keyboards.reply as reply_kb



start_router = Router()

class BaseMenuHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±–µ–∫–æ–≤ –º–µ–Ω—é –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏."""

    def __init__(self, lexicon: dict, title: str, name: str):
        self.lexicon = lexicon
        self.title = title
        self.name = name
        self.menu = reply_kb.BaseMenu(lexicon=self.lexicon, title=self.title)
        self.router = Router()

    @staticmethod
    async def handle_menu_callback(callback: CallbackQuery, text: str, menu_creator):
        """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±–µ–∫–æ–≤."""
        await callback.message.edit_text(
            text=text,
            reply_markup=menu_creator(),
            parse_mode="HTML"
        )

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Base."""

        @self.router.callback_query(F.data == self.title)
        async def callback_contest_menu(callback: CallbackQuery):
            """–ö–æ–ª–±–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
            await self.handle_menu_callback(
                callback,
                text=f"{self.lexicon['will_be_soon1']}{self.name}{self.lexicon['will_be_soon2']}",
                menu_creator=self.menu.create_base_menu_keyboard
            )

        @self.router.callback_query(F.data == f'{self.title}_is')
        async def callback_base_menu_base_is(callback: CallbackQuery):
            """–ö–æ–ª–±–µ–∫ –≤—ã–≤–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
            await self.handle_menu_callback(
                callback,
                text=self.lexicon[f'{self.title}_text'],
                menu_creator=self.menu.create_base_menu_base_is
            )

        @self.router.callback_query(F.data == f'{self.title}_benefits')
        async def callback_base_menu_benefits(callback: CallbackQuery):
            """–ö–æ–ª–±–µ–∫ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ –±–µ–Ω–µ—Ñ–∏—Ç–∞—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
            await self.handle_menu_callback(
                callback,
                text=self.lexicon[f'benefits_{self.title}_text'],
                menu_creator=self.menu.create_base_menu_benefits
            )

        @self.router.callback_query(F.data == f'{self.title}_contests')
        async def callback_base_menu_examples(callback: CallbackQuery):
            """–ö–æ–ª–±–µ–∫ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–∏–º–µ—Ä–∞—Ö –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
            await self.handle_menu_callback(
                callback,
                text=self.lexicon[f'examples_{self.title}_text'],
                menu_creator=self.menu.create_base_menu_examples
            )

        @self.router.callback_query(F.data == f'answer_{self.title}')
        async def callback_base_menu_answer_no(callback: CallbackQuery):
            """–ö–æ–ª–±–µ–∫ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ —Ö–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
            await self.handle_menu_callback(
                callback,
                text=f"{self.lexicon['calendar_offer1']}{self.lexicon[f'calendar_offer_{self.title}']}",
                menu_creator=self.menu.create_base_menu_backward
#             )
#
# @start_router.message(CommandStart(), StateFilter(default_state))
# async def cmd_start(message: Message, state: FSMContext,
#                     session: AsyncSession):
#     tg_user = message.from_user
#
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è username
#     if not tg_user.username:
#         photo_ios_path = 'docs/ios_guide.jpg'
#         photo_android_path = 'docs/android_guide.jpg'
#         ios_instructions = ios_instructions_message
#         android_instructions = android_instructions_message
#         await message.answer_photo(photo=FSInputFile(photo_ios_path), caption=ios_instructions)
#         await message.answer_photo(photo=FSInputFile(photo_android_path), caption=android_instructions)
#         await message.answer(
#             "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å **Username** –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, "
#             "–ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ /start", parse_mode="Markdown"
#         )
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
#     stmt = select(User).where(User.tg_id == tg_user.id)
#     result = await session.execute(stmt)
#     user = result.scalar_one_or_none()
#
#     if not user:
#         # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user = User(
#             tg_id=tg_user.id,
#             first_name=tg_user.first_name,
#             last_name=tg_user.last_name,
#             username=tg_user.username
#         )
#         session.add(user)
#         await session.commit()
#         await message.answer(welcome_message)
#         await state.set_state(Registration.gender)
#         await message.answer("–ö—Ç–æ –í—ã?", reply_markup=inline_kb.kb_gender)
#     else:
#         # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
#                              reply_markup=reply_kb.main)
#
#
# @start_router.callback_query(StateFilter(Registration.gender), F.data.in_(
#     ['male', 'female']))
# async def gender_choice(callback: CallbackQuery, state: FSMContext):
#     gender_mapping = {
#         'male': '–ú—É–∂—á–∏–Ω–∞',
#         'female': '–ñ–µ–Ω—â–∏–Ω–∞'
#     }
#     gender = gender_mapping.get(callback.data)
#     await state.update_data(gender=gender)
#     await state.set_state(Registration.profession)
#     await callback.message.edit_text("–ó–¥–æ—Ä–æ–≤–æ! üòÉ \n\n–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
#                                      reply_markup=inline_kb.kb_profession)
#     await callback.answer()
#
#
# @start_router.callback_query(StateFilter(Registration.profession),
#                              F.data.in_(['student', 'businessman', 'employee',
#                                          'freelancer']))
# async def profession_choice(callback: CallbackQuery, state: FSMContext,
#                             session: AsyncSession):
#     profession_mapping = {
#         'student': '–°—Ç—É–¥–µ–Ω—Ç',
#         'businessman': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
#         'employee': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
#         'freelancer': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä'
#     }
#     profession = profession_mapping.get(callback.data)
#     tg_user = callback.from_user
#     await state.update_data(profession=profession)
#     await callback.answer()
#
#     data = await state.get_data()
#     gender = data.get('gender')
#     profession = data.get('profession')
#
#     stmt = select(User).where(User.tg_id == tg_user.id)
#     result = await session.execute(stmt)
#     user = result.scalar_one_or_none()
#
#     if user:
#         user.gender = gender
#         user.profession = profession
#         await session.commit()
#
#     await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! üëç \n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ 10% –æ—Å—Ç–∞–ª—Å—è "
#                                      "–ª–∏—à—å –æ–¥–∏–Ω —à–∞–≥.\n–ü–µ—Ä–µ–π–¥–∏ –≤ –º–µ–Ω—é –∏ –æ—Ñ–æ—Ä–º–∏ –∫–∞—Ä—Ç—É "
#                                      "–ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ üí≥")
#     await callback.message.answer("–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä—ã—Ç—ã, —Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∏–∫–æ–Ω–∫—É üéõ "
#                                   "–≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —Ä—è–¥–æ–º —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º üëå",
#                                   reply_markup=reply_kb.main)
#     await state.clear()