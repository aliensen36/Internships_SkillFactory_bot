import asyncio
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from app.constants import courses
from app.keyboards.reply import *
from app.keyboards.inline import *
from app.text import *
from database.models import User

start_router = Router()


@start_router.message(CommandStart())
async def start_handler(message: Message, session: AsyncSession):
    tg_user = message.from_user
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    stmt = select(User).where(User.tg_id == tg_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if not user:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            tg_id=tg_user.id,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            username=tg_user.username
        )
        session.add(user)
        await session.commit()

        await message.answer(welcome_msg, parse_mode="HTML")
        # await asyncio.sleep(1)
        await message.answer(about_bot_msg)
        # await asyncio.sleep(1)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—Å—Ç–∞
        for title, key in hidden_texts.items():
            await message.answer(title, reply_markup=get_hidden_text_keyboard(title),
                                 parse_mode="HTML")
            # await asyncio.sleep(1)
        # await asyncio.sleep(1)
        await message.answer('<b>üéØ –•–æ—á–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ?</b>\n\n'
                                 'üëá –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏ –º—ã '
                                 '–ø—Ä–µ–¥–ª–æ–∂–∏–º —Ç–µ–±–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üåü',
                                 reply_markup=kb_specialization,
                                 parse_mode="HTML"
                                 )
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
                             reply_markup=kb_main)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìú –ü—Ä–æ—á–∏—Ç–∞—Ç—å"
@start_router.callback_query(F.data.in_(hidden_texts.keys()))
async def show_hidden_text(callback: CallbackQuery):
    hidden_text = hidden_texts.get(callback.data)
    if hidden_text:
        await callback.answer()
        await callback.message.edit_text(hidden_text, parse_mode="HTML")


# –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@start_router.callback_query(F.data.startswith("spec_"))
async def specialization(callback: CallbackQuery, session: AsyncSession):
    spec = callback.data.replace("spec_", "")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
    stmt = select(User).where(User.tg_id == callback.from_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        user.specialization = spec
        await session.commit()

        await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{spec}</b> üéØ",
                                         parse_mode="HTML")
        await callback.message.answer("üéì –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                                      reply_markup=courses_keyboard())


# –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
@start_router.callback_query(F.data.startswith("course_"))
async def course(callback: CallbackQuery, session: AsyncSession):
    course_code = callback.data.replace("course_", "")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∫—É—Ä—Å–∞ –∏–∑ callback_data
    course_title = COURSE_TITLES.get(course_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å")  # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –≤ –ë–î
    stmt = select(User).where(User.tg_id == callback.from_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        user.course = course_title  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞
        await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å: <b>{course_title}</b> üéì", parse_mode="HTML")
        await callback.message.answer(
            "üöÄ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–±–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ "
            "—Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∫—É—Ä—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
            reply_markup=kb_main
        )

@start_router.callback_query(F.data.startswith("page_"))
async def page_navigation(callback: CallbackQuery):
    page = int(callback.data.replace("page_", ""))
    keyboard = courses_keyboard(page)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await callback.message.edit_text(
        text=f"üéì –í—ã–±–µ—Ä–∏ –∫—É—Ä—Å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):",
        reply_markup=keyboard
    )
    await callback.answer()
