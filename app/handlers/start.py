import asyncio

from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, Message
from aiogram import F, Router
from app.keyboards.reply import *
from app.keyboards.inline import *
from app.text import *
from database.models import *


start_router = Router()


@start_router.message(CommandStart())
async def start_handler(message: Message, session: AsyncSession):
    tg_user = message.from_user
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    stmt = select(User).where(User.tg_id == tg_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if not user:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            tg_id=tg_user.id,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            username=tg_user.username
        )
        session.add(user)
        await session.commit()

        await message.answer(welcome_msg, parse_mode="HTML")
        await asyncio.sleep(1)

        await message.answer(about_bot_msg, parse_mode="HTML")
        await asyncio.sleep(1)

        await message.answer(choose_msg,
                             reply_markup=await specialization_keyboard(session),
                             parse_mode="HTML")
    else:
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("üéâ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üéâ",
                             reply_markup=kb_main)


# –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@start_router.callback_query(F.data.startswith("spec_"))
async def specialization(callback: CallbackQuery, session: AsyncSession):
    spec_id = callback.data.replace("spec_", "").strip()
    if not spec_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.", show_alert=True)
        return

    stmt = select(User).where(User.tg_id == callback.from_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if user:
        spec_stmt = select(Specialization).where(Specialization.id == int(spec_id))
        spec_result = await session.execute(spec_stmt)
        specialization = spec_result.scalar_one_or_none()

        if specialization:
            user.specialization_id = specialization.id
            await session.commit()

            await callback.message.edit_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:\n\n<b>{specialization.name}</b>",
                parse_mode="HTML"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å—ã –ø–æ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            keyboard = await courses_keyboard(session, user.specialization_id, 0)

            if keyboard is None:
                await callback.message.answer(
                    "‚ùå –ö—É—Ä—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:",
                    reply_markup=await specialization_keyboard(session)  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                )
            else:
                await callback.message.answer(
                    "üéì –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                    reply_markup=keyboard
                )
        else:
            await callback.answer("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    else:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


# –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
@start_router.callback_query(F.data.startswith("course_"))
async def course(callback: CallbackQuery, session: AsyncSession):
    course_id = callback.data.replace("course_", "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å id
    if not course_id.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫—É—Ä—Å–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stmt = select(User).where(User.tg_id == callback.from_user.id)
    result = await session.execute(stmt)
    user = result.scalar_one_or_none()

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–Ω –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stmt = select(Course).where(Course.id == int(course_id), Course.specialization_id == user.specialization_id)
    result = await session.execute(stmt)
    course = result.scalar_one_or_none()

    if course:
        user.course_id = course.id
        await session.commit()

        new_text = f"‚úÖ –í—ã–±—Ä–∞–Ω –∫—É—Ä—Å:\n\n<b>{course.name}</b>"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if callback.message.text != new_text:
            try:
                await callback.message.edit_text(new_text, parse_mode="HTML")
            except TelegramBadRequest:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

        await callback.message.answer("üöÄ –û—Ç–ª–∏—á–Ω–æ! üéâ\n\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫"
                                      " <b>–ø—Ä–æ–µ–∫—Ç–∞–º</b> –∫—É—Ä—Å–∞ üìö.\n–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å "
                                      "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö üîî.\n\n"
                                      "<i>–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.</i>",
                                      reply_markup=kb_main,
                                      parse_mode="HTML")
    else:
        await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.", show_alert=True)


# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞
@start_router.callback_query(F.data.startswith("page_"))
async def paginate_courses(callback: CallbackQuery, session: AsyncSession):
    _, specialization_id, page = callback.data.split("_")

    if not specialization_id.isdigit() or not page.isdigit():
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.", show_alert=True)
        return

    specialization_id, page = int(specialization_id), int(page)

    keyboard = await courses_keyboard(session, specialization_id, page)

    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except TelegramBadRequest:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å


# @start_router.callback_query(F.data.startswith("factory_"))
# async def explain_factory_format(callback: CallbackQuery):
#     explanations = {
#         "factory_internship": "üíº –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ ‚Äî –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –æ—Ç "
#                               "–∫–æ–º–ø–∞–Ω–∏–π –∏ –ù–ö–û.",
#         "factory_hackathon": "‚ö° –•–∞–∫–∞—Ç–æ–Ω—ã ‚Äî –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ "
#                              "–∑–∞–¥–∞—á–∞–º–∏ –∏ —Å–∂–∞—Ç—ã–º–∏ —Å—Ä–æ–∫–∞–º–∏.",
#         "factory_megahack": "üöÄ –ú–µ–≥–∞—Ö–∞–∫–∞—Ç–æ–Ω—ã ‚Äî –º–∞—Å—à—Ç–∞–±–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —Ç–æ–ø–æ–≤—ã–º–∏ "
#                             "–∫–µ–π—Å–∞–º–∏.",
#         "factory_contest": "üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è –∏ –≤—ã–∏–≥—Ä–∞—Ç—å "
#                            "–ø—Ä–∏–∑—ã.",
#         "factory_gamejam": "üéÆ –ì–µ–π–º–¥–∂–µ–º—ã ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è, –∫—Ä–µ–∞—Ç–∏–≤ "
#                            "–∏ —Ñ–∞–Ω–æ–≤—ã–π –æ–ø—ã—Ç!",
#         "factory_special": "üéØ –°–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã ‚Äî –Ω–µ–æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ "
#                            "—Å –±–∏–∑–Ω–µ—Å–æ–º –∏ –ù–ö–û."
#     }
#
#     text = explanations.get(callback.data, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
#     await callback.answer(text, show_alert=True)