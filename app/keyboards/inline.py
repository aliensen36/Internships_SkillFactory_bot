from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from mypyc.irbuild import builder
from sqlalchemy import or_

from database.models import *


# –ü—Ä–æ–µ–∫—Ç—ã
def get_main_menu_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üíº –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞", callback_data="internship")
    keyboard.button(text="üèÅ –•–∞–∫–∞—Ç–æ–Ω—ã", callback_data="hackathons")
    keyboard.button(text="üöÄ –ú–µ–≥–∞—Ö–∞–∫–∞—Ç–æ–Ω—ã", callback_data="mega_hackathons")
    keyboard.button(text="üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã", callback_data="contests")
    keyboard.button(text="üéÆ –ì–µ–π–º–¥–∂–µ–º—ã", callback_data="gamejams")
    keyboard.button(text="‚ú® –°–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã", callback_data="special_projects")
    keyboard.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return keyboard.as_markup()


kb_factory = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üíº –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data="factory_internship"),
     InlineKeyboardButton(text="‚ö° –•–∞–∫–∞—Ç–æ–Ω—ã", callback_data="factory_hackathon")],

    [InlineKeyboardButton(text="üöÄ –ú–µ–≥–∞—Ö–∞–∫–∞—Ç–æ–Ω—ã", callback_data="factory_megahack"),
     InlineKeyboardButton(text="üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã", callback_data="factory_contest")],

    [InlineKeyboardButton(text="üéÆ –ì–µ–π–º–¥–∂–µ–º—ã", callback_data="factory_gamejam"),
     InlineKeyboardButton(text="üéØ –°–ø–µ—Ü–ø—Ä–æ–µ–∫—Ç—ã", callback_data="factory_special")]
])


# –í—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def specialization_keyboard(session: AsyncSession):
    specialization_stmt = select(Specialization)
    result = await session.execute(specialization_stmt)
    specializations = result.scalars().all()

    inline_keyboard = []
    for specialization in specializations:
        button = InlineKeyboardButton(text=specialization.name,
                                      callback_data=f"spec_{specialization.id}")
        inline_keyboard.append([button])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –í—ã–±–æ—Ä –∫—É—Ä—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def courses_keyboard(session: AsyncSession, specialization_id: int,
                           page: int = 0):
    items_per_page = 4
    start_index = page * items_per_page

    # –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    stmt = select(Course).where(Course.specialization_id == specialization_id).offset(start_index).limit(items_per_page)
    result = await session.execute(stmt)
    current_courses = result.scalars().all()

    # –ï—Å–ª–∏ –∫—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if not current_courses and page == 0:
        return None

    inline_keyboard = [[InlineKeyboardButton(text=course.name, callback_data=f"course_{course.id}")]
                       for course in current_courses]

    navigation_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                                       callback_data=f"page_{specialization_id}_{page - 1}"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    next_page_stmt = (
        select(Course)
        .where(Course.specialization_id == specialization_id)
        .offset((page + 1) * items_per_page)
        .limit(1)
    )
    next_page_result = await session.execute(next_page_stmt)
    if next_page_result.scalars().first():
        navigation_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                                                       callback_data=f"page_{specialization_id}_{page + 1}"))

    if navigation_buttons:
        inline_keyboard.append(navigation_buttons)

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async def change_specialization_keyboard(session: AsyncSession):
    specialization_stmt = select(Specialization)
    result = await session.execute(specialization_stmt)
    specializations = result.scalars().all()

    inline_keyboard = []
    for specialization in specializations:
        button = InlineKeyboardButton(text=specialization.name,
                                      callback_data=f"change_spec_{specialization.id}")
        inline_keyboard.append([button])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def change_courses_keyboard(session: AsyncSession,
                                  specialization_id: int,
                                  page: int = 0):
    items_per_page = 4
    start_index = page * items_per_page

    # –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    stmt = (
        select(Course)
        .where(Course.specialization_id == specialization_id)
        .offset(start_index)
        .limit(items_per_page)
    )
    result = await session.execute(stmt)
    current_courses = result.scalars().all()

    # –ï—Å–ª–∏ –∫—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if not current_courses and page == 0:
        return None

    inline_keyboard = [[InlineKeyboardButton(text=course.name,
                                             callback_data=f"change_course_{course.id}")]
                       for course in current_courses]

    navigation_buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                 callback_data=f"changepage_{specialization_id}_{page - 1}"))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    next_page_stmt = select(Course).where(Course.specialization_id == specialization_id).offset(
        (page + 1) * items_per_page).limit(1)
    next_page_result = await session.execute(next_page_stmt)
    if next_page_result.scalars().first():
        navigation_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                                 callback_data=f"changepage_{specialization_id}_{page + 1}"))

    if navigation_buttons:
        inline_keyboard.append(navigation_buttons)

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)




async def projects_keyboard(session: AsyncSession):
    builder = InlineKeyboardBuilder()

    result = await session.execute(select(Project))
    projects = result.scalars().all()

    for project in projects:
        builder.button(
            text=project.title,
            callback_data=f"project_{project.id}"
        )

    builder.adjust(2)
    return builder


async def bc_courses_keyboard(
        session: AsyncSession,
        search_query: str = None,
        page: int = 0,
        per_page: int = 8,
        selected_ids: list[int] = None
):
    builder = InlineKeyboardBuilder()

    if selected_ids is None:
        selected_ids = []

    query = select(Course)
    if search_query:
        query = query.where(Course.name.ilike(f"%{search_query}%"))

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –∏–º–µ–Ω–∏ –∫—É—Ä—Å–∞
    query = query.order_by(Course.name.asc())

    query = query.offset(page * per_page).limit(per_page)
    result = await session.execute(query)
    courses = result.scalars().all()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å—ã –ø–æ –∏–º–µ–Ω–∏ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    sorted_courses = sorted(courses, key=lambda c: c.name)

    for course in sorted_courses:
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        prefix = "‚úÖ " if course.id in selected_ids else ""
        builder.button(
            text=f"{prefix}{course.name}",
            callback_data=f"bccourse_{course.id}"
        )

    builder.adjust(2)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"bcpage_{page - 1}_{search_query or ''}"
            )
        )

    next_page = await session.execute(query.offset((page + 1) * per_page).limit(1))
    if next_page.scalars().first():
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data=f"bcpage_{page + 1}_{search_query or ''}"
            )
        )

    if nav_buttons:
        builder.row(*nav_buttons)

    builder.row(
        InlineKeyboardButton(
            text="üîç –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤",
            callback_data="courses_search"
        ),
        InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
            callback_data="finish_courses_selection"
        )
    )

    return builder
